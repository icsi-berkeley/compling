//
// vp.grm
//

general construction VP
 subcase of HasVerbFeatures //, RootType 8/9/13 *****************
  meaning: Process 
    evokes EventDescriptor as ed
    constraints
      self.m <--> ed.eventProcess
	  self.m.ed <--> ed // pointer from process to EventDescriptor


// subcases of ArgumentStructure are in individual argstruct.grm files
general construction ArgumentStructure 
  subcase of VP
  constructional
    constituents
      v : Verb 
    constraints
      self.features <--> v.features
      self.voice <--> v.voice
   meaning
     evokes A123 as s  
     constraints
       v.m  <--> ed.profiledProcess
       self.m.p-features <--> v.m.p-features 
      

// The A123 schema serves as a way to refer to up to 3 argument roles within an Argument Structure cxn.  
//Additional semantic constraints on these roles arise via binding to other schema roles

schema A123 //  evoked by ArgumentStructure cxn
	roles
		a1:RD
		a2:RD
		a3		


// CopularVP constructions
 general construction CopularVP
  subcase of VP
  constructional  
    constituents
      	cop: Verb
    constraints
		cop.argform <-- Copula 
  		self.features <--> cop.features
    meaning: Stasis
       constraints
    	self.m <--> cop.m
        self.m.protagonist <--> ed.profiledParticipant
        
// Used to analyze, e.g. "the block is in the room" 
construction CopularVPLocative
  subcase of VP
  constructional  
    constituents
      	cop: Verb
       	pred: Loc-PP 
  	constraints
  		self.features <--> cop.features
  		cop.argform <-- Copula_Loc 
  form
    constraints
      cop.f before pred.f  
  meaning: Stasis
    constraints
    	self.m <--> cop.m
        ed.profiledParticipant <--> pred.m.trajector 
        self.m.protagonist <--> ed.profiledParticipant
        self.m.state <--> pred.m 
      
//Used to analyze, e.g., "the block is red"
construction CopularVPAdjective  
  subcase of VP
  constructional  
    constituents
      	cop: Verb
      	adj: Adjective
  	constraints
  		self.features <--> cop.features
  		cop.argform <-- Copula_Adj 
	form
    constraints
      	cop.f meets adj.f
  meaning: Stasis 
    constraints
    	//adj.m.kind <-- @unmarked  // 3/5/13
    	self.m <--> cop.m
        self.m.protagonist <--> ed.profiledParticipant
        self.m.state <--> adj.m
        self.adj.m.modifiedThing <--> ed.profiledParticipant  // might be enough for Adj-N agreement 10/27/12
 		self.adj.m.domain <--> ed.profiledParticipant.ontological-category // Adj-N agreement 10/27/12
 
 construction StagedVP  // aspect verbs ~ start ArgStruct ??? 1/8/13
   subcase of	VP
    constructional 
        constituents
           v: Verb 
           vp: VP
  		constraints
			vp.verbkind <-- Stage // start, etc
			v.expectedVerbForm <-->  vp.features.verbform
			self.features <--> v.features 		
  form
  		constraints
			v.f meets vp.f
  meaning: StagedProcess
        constraints	
          self.m.protagonist <--> ed.profiledParticipant // 1/16/13
          self.m.stageRole <--> v.m.actionary
          ed.profiledProcess <--> vp.m  // should this be eventProcess instead? 10/16/13
          ed.profiledParticipant <--> vp.ed.profiledParticipant


/* 7/14/14 (ST) -- still testing          
construction Copular-NP
	subcase of VP
	constructional
	  constituents
	    cop: BeCopula
	    id: NP
	  constraints
	    self.features <--> cop.features
	form
	  constraints
	    cop.f meets id.f
	meaning: Stasis
	   constraints
	    self.m <--> cop.m
	    //self.m.protagonist <--> ed.profiledParticipant 
	    self.m.protagonist <--> id.m   // either bind id.m or cop.state
	    ed.profiledParticipant <--> self.m.state   // is this correct?

*/
// Added from Base on 7/31/14 (ST)
 construction CopularVPNominal // 2/14/13
  subcase of CopularVP
  constructional  
    constituents
      	nominal: NP
  form
    constraints
      	cop.f meets nominal.f
  meaning: Stasis
    evokes RefIdentify as ri
   constraints
        self.m.state <--> ri
        ri.first <--> ed.profiledParticipant
        ri.second <--> nominal.m     
                
/*
Nominal copulas (e.g. "it is a box") could be analyzed using a CopuluarVPNominal cxn
such as the one shown below, whcih is a subcase of the general CopularVP cxn above.
Note that the current first grammar does not contain the RefIdentity schema referred to by this cxn.

construction CopularVPNominal // 2/14/13
  subcase of CopularVP
  constructional  
    constituents
      	nominal: NP
  form
    constraints
      	cop.f meets nominal.f
  meaning: Stasis 
    evokes RefIdentify as ri
   constraints
        self.m.state <--> ri
        ri.first <--> ed.profiledParticipant
        ri.second <--> nominal.m   
 

Sentences such as "he is moving" can potentially be analyzed in various ways.
One way is through the use of a CopularVPParticiple cxn such as the one shown below.
Note that while the current grammar has a general PresentParticiple cxn, it does not
have any specific lexical cxns for present participles.  Also, the current first grammar
does not contain a ParticipleModification schema.   
  

construction CopularVPParticiple // 10/16/13
  subcase of VP
  constructional  
    constituents
      	cop: Verb
      	pp: PresentParticiple
  	constraints
  		self.features <--> cop.features
  		cop.argform <-- Copula  // check this ********** 
	form
    constraints
      	cop.f meets pp.f
  meaning: Stasis
     evokes ParticipleModification as pm 
    constraints
    	//adj.m.kind <-- @unmarked  // 3/5/13
    	self.m <--> cop.m
        self.m.protagonist <--> ed.profiledParticipant
        self.m.state <--> pm
        pm.modifier <--> pp.m
        pm.modifiedThing <--> ed.profiledParticipant  // might be enough for Adj-N agreement 10/27/12
 		//self.adj.m.domain <--> ed.profiledParticipant.ontological-category // Adj-N agreement 10/27/12
 
 
 */
 
        
