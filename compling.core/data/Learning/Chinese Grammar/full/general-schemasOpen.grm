//============================================================
// Everything in this section is assumed as prior knowledge
//============================================================


//============================================================
// Intransitive States
//============================================================

schema Amusing
	subcase of Intransitive_State
	constraints
		protagonist <-- @Inanimate
		category <-- @Undef

schema Abundant
	subcase of Intransitive_State
	constraints
		protagonist <-- @Inanimate
		category <-- @Quantity

schema Achieved
	subcase of Intransitive_State
	constraints
		category <-- @Undef

schema Angry
	subcase of Intransitive_State
	constraints
		protagonist <-- @Animate
		category <-- @Undef

schema Annoying
	subcase of Intransitive_State
	constraints
		protagonist <-- @Inanimate
		category <-- @Undef

schema Bad
	subcase of Intransitive_State
	constraints
		category <-- @Undef

schema Bared
	subcase of Intransitive_State
	constraints
		category <-- @Undef

schema Big
	subcase of Intransitive_State
	constraints
		category <-- @Size

schema Broken
	subcase of Intransitive_State
	constraints
		protagonist <-- @Inanimate
		category <-- @Undef

schema Correct
	subcase of Intransitive_State
	constraints
		category <-- @Undef

schema Comfortable
	subcase of Intransitive_State
	constraints
		category <-- @Undef

schema Dirty
	subcase of Intransitive_State
	constraints
		category <-- @Undef

schema Enough
	subcase of Intransitive_State
	constraints
		protagonist <-- @Inanimate

schema Faint
	subcase of Intransitive_State
	constraints
		protagonist <-- @Animate
		category <-- @Undef

schema Fine
	subcase of Intransitive_State
	constraints
		protagonist <-- @Inanimate
		category <-- @Undef

schema Finished
	subcase of Intransitive_State
	constraints
		protagonist <-- @Process
		category <-- @Undef

schema Fragrant
	subcase of Intransitive_State
	constraints
		protagonist <-- @Concrete_Entity
		category <-- @Undef

schema Full
	subcase of Intransitive_State
	constraints
		protagonist <-- @Animate
		category <-- @Undef

schema Good
	subcase of Intransitive_State
	constraints
		category <-- @Manner

schema Good_Enough 
	subcase of Intransitive_State
	constraints
		category <-- @Undef

schema Green
	subcase of Intransitive_State
	constraints
		protagonist <-- @Concrete_Entity
		category <-- @Color_Property

schema High
	subcase of Intransitive_State
	constraints
		category <-- @Undef

schema Hungry
	subcase of Intransitive_State
	constraints
		protagonist <-- @Animate
		category <-- @Undef

schema Idle
	subcase of Intransitive_State
	constraints
		category <-- @Undef

schema Matter
	subcase of Intransitive_State
	constraints
		category <-- @Undef

schema Naughty
	subcase of Intransitive_State
	constraints
		protagonist <-- @Animate
		category <-- @Manner

schema Obedient
	subcase of Intransitive_State
	constraints
		protagonist <-- @Animate
		category <-- @Manner

schema Painful
	subcase of Intransitive_State
	constraints
		protagonist <-- @Concrete_Entity
		category <-- @Undef

schema Perceived
	subcase of Intransitive_State
	constraints
		protagonist <-- @Concrete_Entity
		category <-- @Undef

schema Pretty
	subcase of Intransitive_State
	constraints
		protagonist <-- @Concrete_Entity
		category <-- @Undef

schema Red
	subcase of Intransitive_State
	constraints
		protagonist <-- @Concrete_Entity
		category <-- @Color_Property

schema Small
	subcase of Intransitive_State
	constraints
		category <-- @Size

schema Stupid
	subcase of Intransitive_State
	constraints
		protagonist <-- @Human
		category <-- @Undef

schema Tasty
	subcase of Intransitive_State
	constraints
		protagonist <-- @Inanimate
		category <-- @Undef

schema Tired
	subcase of Intransitive_State
	constraints
		protagonist <-- @Animate
		category <-- @Undef

schema Ugly
	subcase of Intransitive_State
	constraints
		protagonist <-- @Animate
		category <-- @Undef

schema Up
	subcase of Intransitive_State
	constraints
		category <-- @Undef

schema Well_Behaved 
	subcase of Intransitive_State
	constraints
		protagonist <-- @Animate
		category <-- @Manner

schema White
	subcase of Intransitive_State
	constraints
		protagonist <-- @Concrete_Entity
		category <-- @Color_Property

schema Yellow
	subcase of Intransitive_State
	constraints
		protagonist <-- @Concrete_Entity
		category <-- @Color_Property

//============================================================
// Two Participant States
//============================================================

schema Located
	subcase of Two_Participant_State

schema Exist
	subcase of Two_Participant_State

schema Copula
	subcase of Two_Participant_State


//============================================================
// Mental States
//============================================================

schema Afraid
	subcase of Mental_State

schema Be_Concerned_With
	subcase of Mental_State

schema Know
	subcase of Mental_State

schema Like
	subcase of Mental_State

schema Love
	subcase of Mental_State

schema Miss
	subcase of Mental_State

schema Required_to 
	subcase of Mental_State

schema Want
	subcase of Mental_State

schema Willing
	subcase of Mental_State

//============================================================
// Active X-schemas
//============================================================

//===================================
// Intransitive Actions
//===================================

schema Count
	subcase of Intransitive_Action
	constraints
		inherent_aspect <-- @Inherent_Accomplishment
		protagonist <-- @Animate


schema Proceed
	subcase of Intransitive_Action
	constraints
		inherent_aspect <-- @Inherent_Activity
		protagonist <-- @Animate


schema Play
	subcase of Intransitive_Action
	constraints
		inherent_aspect <-- @Inherent_Activity
		protagonist <-- @Animate


schema Get_Even
	subcase of Intransitive_Action
	constraints
		inherent_aspect <-- @Inherent_Accomplishment
		protagonist <-- @Animate


schema Sing
	subcase of Intransitive_Action
	constraints
		inherent_aspect <-- @Inherent_Accomplishment
		protagonist <-- @Animate


schema Sneeze
	subcase of Intransitive_Action
	constraints
		inherent_aspect <-- @Inherent_Achievement
		protagonist <-- @Animate


//===================================
// Expression
//===================================

schema Cry
	subcase of Expression
	constraints
		inherent_aspect <-- @Inherent_Activity
		protagonist <-- @Animate

schema Fuss
	subcase of Expression
	constraints
		inherent_aspect <-- @Inherent_Activity
		protagonist <-- @Animate

schema Smile
	subcase of Expression
	constraints
		inherent_aspect <-- @Inherent_Activity
		protagonist <-- @Animate

//===================================
// Self Motion
//===================================

schema Dance
	subcase of Self_Motion
	constraints
		inherent_aspect <-- @Inherent_Activity
		protagonist <-- @Animate


schema Kneel
	subcase of Self_Motion
	constraints
		inherent_aspect <-- @Inherent_Activity
		protagonist <-- @Animate


schema Lie_Down
	subcase of Self_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		protagonist <-- @Animate


schema Rise
	subcase of Self_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		protagonist <-- @Animate


schema Sit
	subcase of Self_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		protagonist <-- @Animate


schema Spin
	subcase of Self_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		protagonist <-- @Animate


schema Trip
	subcase of Self_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		protagonist <-- @Animate


//===================================
// Translational Self Motion
//===================================

schema Ascend
	subcase of Translational_Self_Motion
	constraints
		mover <-- @Animate
		inherent_aspect <-- @Inherent_Accomplishment


schema Climb
	subcase of Translational_Self_Motion
	constraints
		mover <-- @Animate
		inherent_aspect <-- @Inherent_Accomplishment


schema Come
	subcase of Translational_Self_Motion
	constraints
		mover <-- @Animate
		inherent_aspect <-- @Inherent_Accomplishment


schema Descend
	subcase of Translational_Self_Motion
	constraints
		mover <-- @Animate
		inherent_aspect <-- @Inherent_Accomplishment


schema Exit
	subcase of Translational_Self_Motion
	constraints
		mover <-- @Animate
		inherent_aspect <-- @Inherent_Achievement


schema Fall
	subcase of Translational_Self_Motion
	constraints
		mover <-- @Entity
		inherent_aspect <-- @Inherent_Achievement


schema Go
	subcase of Translational_Self_Motion
	constraints
		mover <-- @Animate
		inherent_aspect <-- @Inherent_Accomplishment


schema Hide
	subcase of Translational_Self_Motion
	constraints
		mover <-- @Animate
		inherent_aspect <-- @Inherent_Accomplishment


schema Run
	subcase of Translational_Self_Motion
	constraints
		mover <-- @Animate
		inherent_aspect <-- @Inherent_Activity


schema Walk
	subcase of Translational_Self_Motion
	constraints
		mover <-- @Animate
		inherent_aspect <-- @Inherent_Activity


//===================================
// Continuous Force Application
//===================================

schema Contain
	subcase of Continuous_Force_Application
	constraints
		inherent_aspect <-- @Inherent_Activity
		force_supplier <-- @Inanimate
		force_recipient <-- @Inanimate


schema Drive
	subcase of Continuous_Force_Application
	constraints
		inherent_aspect <-- @Inherent_Activity
		force_supplier <-- @Animate
		force_recipient <-- @Car


schema Escort
	subcase of Continuous_Force_Application
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object


schema Hug
	subcase of Continuous_Force_Application
	constraints
		inherent_aspect <-- @Inherent_Semelfactive
		force_supplier <-- @Animate
		force_recipient <-- @Concrete_Entity


schema Ride
	subcase of Continuous_Force_Application
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Entity


schema Steer
	subcase of Continuous_Force_Application
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Entity


//===================================
// Forceful Motion
//===================================

schema Drop 
	subcase of Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object


schema Pin
	subcase of Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object


schema Press
	subcase of Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Concrete_Entity
		force_recipient <-- @Concrete_Entity


schema Prick
	subcase of Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Sharp_Object
		force_recipient <-- @Concrete_Entity


schema Pull
	subcase of Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Activity
		force_supplier <-- @Animate
		force_recipient <-- @Concrete_Entity


schema Push
	subcase of Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Activity
		force_supplier <-- @Animate
		force_recipient <-- @Concrete_Entity


schema Slam
	subcase of Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object


schema Spit
	subcase of Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object


schema Stir
	subcase of Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Substance


schema Sweep
	subcase of Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object


schema Wipe
	subcase of Forceful_Motion
	evokes Move as move
	roles
		mop : @Manipulable_Inanimate_Object
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Human
		force_recipient <-- @Solid
		move.force_supplier <--> force_supplier
		move.force_recipient <--> mop


//===================================
// Translational Forceful Motion
//===================================


schema Apply
	subcase of Translational_Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Semelfactive
		force_supplier <-- @Animate
		force_recipient <-- @Substance


schema Ladle 
	subcase of Translational_Forceful_Motion
	roles
		container : @Physical_Container
	constraints
		inherent_aspect <-- @Inherent_Accomplishment
		force_supplier <-- @Animate
		force_recipient <-- @Substance
		container <--> spg.goal


schema Load
	subcase of Translational_Forceful_Motion
	roles
		container : @Physical_Container
	constraints
		inherent_aspect <-- @Inherent_Accomplishment
		force_supplier <-- @Animate
		force_recipient <-- @Concrete_Entity


schema Move
	subcase of Translational_Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Accomplishment
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object


schema Plug
	subcase of Translational_Forceful_Motion
	roles
		opening : @Manipulable_Inanimate_Object
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object
		opening <--> spg.goal


schema Put
	subcase of Translational_Forceful_Motion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object


//===================================
// Agentive Impact
//===================================

schema Beat
	subcase of Agentive_Impact
	constraints
		inherent_aspect <-- @Inherent_Semelfactive
		force_supplier <-- @Animate
		force_recipient <-- @Concrete_Entity


schema Kick
	subcase of Agentive_Impact
	constraints
		inherent_aspect <-- @Inherent_Semelfactive
		force_supplier <-- @Animate
		force_recipient <-- @Concrete_Entity


schema Mash
	subcase of Agentive_Impact
	constraints
		inherent_aspect <-- @Inherent_Semelfactive
		force_supplier <-- @Animate
		force_recipient <-- @Concrete_Entity


schema Press_Down_With_Leg
	subcase of Agentive_Impact
	constraints
		inherent_aspect <-- @Inherent_Semelfactive
		force_supplier <-- @Animate
		force_recipient <-- @Concrete_Entity


schema Slap
	subcase of Agentive_Impact
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Entity


schema Throw
	subcase of Agentive_Impact
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object


//===================================
// Cause Change
//===================================

schema Cut
	subcase of Cause_Change
	constraints
		inherent_aspect <-- @Inherent_Achievement
		actor <-- @Animate
		undergoer <-- @Manipulable_Inanimate_Object


schema Close
	subcase of Cause_Change
	constraints
		inherent_aspect <-- @Inherent_Achievement
		actor <-- @Animate
		undergoer <-- @Openable


schema Damage
	subcase of Cause_Change
	constraints
		inherent_aspect <-- @Inherent_Accomplishment
		actor <-- @Animate
		undergoer <-- @Manipulable_Inanimate_Object


schema Discard
	subcase of Cause_Change
	constraints
		inherent_aspect <-- @Inherent_Achievement
		actor <-- @Animate
		undergoer <-- @Manipulable_Inanimate_Object


schema Fix
	subcase of Cause_Change
	constraints
		inherent_aspect <-- @Inherent_Achievement
		actor <-- @Animate
		undergoer <-- @Manipulable_Inanimate_Object


schema Open
	subcase of Cause_Change
	constraints
		inherent_aspect <-- @Inherent_Achievement
		actor <-- @Animate
		undergoer <-- @Openable


schema Rip_Open
	subcase of Cause_Change
	constraints
		inherent_aspect <-- @Inherent_Accomplishment
		actor <-- @Animate
		undergoer <-- @Manipulable_Inanimate_Object


schema Start
	subcase of Cause_Change
	constraints
		inherent_aspect <-- @Inherent_Achievement
		actor <-- @Animate
		undergoer <-- @Process


schema Switch_On
	subcase of Cause_Change
	constraints
		inherent_aspect <-- @Inherent_Achievement
		actor <-- @Animate
		undergoer <-- @Electrical_Appliance


schema Switch_Off
	subcase of Cause_Change
	constraints
		inherent_aspect <-- @Inherent_Achievement
		actor <-- @Animate
		undergoer <-- @Electrical_Appliance


schema Wash 
	subcase of Cause_Change
	constraints
		inherent_aspect <-- @Inherent_Activity
		actor <-- @Human
		undergoer <-- @Concrete_Entity


//===================================
// Obtainment
//===================================

schema Bring
	subcase of Continuous_Force_Application, Obtainment
	constraints
		inherent_aspect <-- @Inherent_Activity
		force_supplier <-- @Animate
		obtainer <--> force_supplier
		obtained <--> force_recipient
		
schema Carry
	subcase of Continuous_Force_Application, Obtainment
	constraints
		inherent_aspect <-- @Inherent_Activity
		force_supplier <-- @Animate
		obtainer <--> force_supplier
		obtained <--> force_recipient


schema Carry_On_Back
	subcase of Continuous_Force_Application, Obtainment
	constraints
		inherent_aspect <-- @Inherent_Activity
		force_supplier <-- @Animate
		obtainer <--> force_supplier
		obtained <--> force_recipient


schema Grasp
	subcase of Continuous_Force_Application, Obtainment
	constraints
		inherent_aspect <-- @Inherent_Activity
		force_supplier <-- @Animate
		obtainer <--> force_supplier
		obtained <--> force_recipient


schema Lift
	subcase of Continuous_Force_Application, Obtainment
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		obtainer <--> force_supplier
		obtained <--> force_recipient


schema Pick
	subcase of Forceful_Motion, Obtainment
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object
		obtainer <--> force_supplier
		obtained <--> force_recipient


schema Fetch
	subcase of Translational_Forceful_Motion, Obtainment
	constraints
		inherent_aspect <-- @Inherent_Accomplishment
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object
		obtainer <--> force_supplier
		obtained <--> force_recipient


schema Take
	subcase of Translational_Forceful_Motion, Obtainment
	constraints
		inherent_aspect <-- @Inherent_Achievement
		force_supplier <-- @Animate
		force_recipient <-- @Manipulable_Inanimate_Object
		obtainer <--> force_supplier
		obtained <--> force_recipient

//===================================
// Ingestion
//===================================

// note: can't type restrict the ingested to food exactly because of sentences like "Don't eat this (plastic thing)!"
schema Eat
	subcase of Ingestion
	evokes Chew as chew
	evokes Swallow as swallow
	constraints
		inherent_aspect <-- @Inherent_Activity
		ingester <-- @Animate
		ingested <-- @Manipulable_Inanimate_Object
		ingester <--> chew.ingester
		ingested <--> chew.ingested
		ingester <--> swallow.ingester
		ingested <--> swallow.ingested


schema Chew
	subcase of Ingestion
	constraints
		inherent_aspect <-- @Inherent_Activity
		ingester <-- @Animate
		ingested <-- @Manipulable_Inanimate_Object


schema Drink
	subcase of Ingestion
	constraints
		inherent_aspect <-- @Inherent_Activity
		ingester <-- @Animate
		ingested <-- @Liquid


schema Swallow
	subcase of Ingestion
	constraints
		inherent_aspect <-- @Inherent_Achievement
		ingester <-- @Animate
		ingested <-- @Manipulable_Inanimate_Object


//===================================
// Perception
//===================================

schema Perceive_Audio
	subcase of Perception
	constraints
		inherent_aspect <-- @Inherent_Activity
		perceiver <-- @Animate


schema Perceive_Visual
	subcase of Perception
	constraints
		inherent_aspect <-- @Inherent_Activity
		perceiver <-- @Animate


schema Perceive_Olfactory
	subcase of Perception
	constraints
		inherent_aspect <-- @Inherent_Activity
		perceiver <-- @Animate


schema Observe
	subcase of Perception
	constraints
		inherent_aspect <-- @Inherent_Activity
		perceiver <-- @Animate


//===================================
// Other Transitive Actions
//===================================

schema Attend
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Activity
		agent <-- @Human
		patient <-- @School


schema Bite
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <-- @Animate
		patient <-- @Concrete_Entity


schema Cook
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <-- @Animate
		patient <-- @Food


schema Draw
	subcase of Uncategorized_Transitive_Action
	roles		
		drawn_on : @Entity
	constraints
		inherent_aspect <-- @Inherent_Activity
		agent <-- @Animate
		patient <-- @Printed_Work


schema Find
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Accomplishment
		agent <-- @Animate
		patient <-- @Manipulable_Inanimate_Object


schema Photograph
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Accomplishment
		agent <-- @Animate
		patient <-- @Entity


schema Play_With
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Activity
		agent <-- @Animate
		patient <-- @Entity


schema Point
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <-- @Animate


schema Reach
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <-- @Animate
		patient <-- @Manipulable_Inanimate_Object


schema Read
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <-- @Animate
		patient <-- @Book


schema Release_Grasp
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <-- @Animate
		patient <-- @Manipulable_Inanimate_Object


schema Reserve
	subcase of Uncategorized_Transitive_Action
	evokes BenefactionOrMalefaction as benefaction
	roles
		reserved_for : @Animate
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <-- @Animate
		patient <-- @Manipulable_Inanimate_Object
		agent <--> benefaction.benefactor
		reserved_for <--> benefaction.beneficiary
		self <--> benefaction.benefit


schema Serve
	subcase of Uncategorized_Transitive_Action
	roles
		container: @Physical_Container
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <-- @Animate
		patient <-- @Food


schema Tease
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Activity
		agent <-- @Human
		patient <-- @Human


schema Touch
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <-- @Animate
		patient <-- @Concrete_Entity


schema Wear
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Activity
		agent <-- @Animate
		patient <-- @Wearable_Item


schema Wind
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <-- @Animate
		patient <-- @Concrete_Entity


schema Write
	subcase of Uncategorized_Transitive_Action
	roles
		written_on : @Entity
	constraints
		inherent_aspect <-- @Inherent_Activity
		agent <-- @Animate
		patient <-- @Printed_Work


schema Substitute_For
	subcase of Uncategorized_Transitive_Action
	roles
		original : @Entity
		substitute : @Entity
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <--> original


schema Switch
	subcase of Uncategorized_Transitive_Action
	roles
		switched : @Entity
	constraints
		inherent_aspect <-- @Inherent_Achievement
		agent <-- @Animate


schema Take_Off
	subcase of Uncategorized_Transitive_Action
	constraints
		inherent_aspect <-- @Inherent_Activity
		agent <-- @Animate
		patient <-- @Wearable_Item


//===================================
// Communication
//===================================


schema Ask
	subcase of Communication
	constraints
		inherent_aspect <-- @Inherent_Achievement
		communicator <-- @Animate
		audience <-- @Animate


schema Accuse
	subcase of Communication
	constraints
		inherent_aspect <-- @Inherent_Achievement
		communicator <-- @Animate
		audience <-- @Animate


schema Beckon
	subcase of Communication
	constraints
		inherent_aspect <-- @Inherent_Achievement
		communicator <-- @Animate
		audience <-- @Animate


schema Explain 
	subcase of Communication
	constraints
		inherent_aspect <-- @Inherent_Activity
		communicator <-- @Human
		audience <-- @Human


schema Illustrate
	subcase of Communication
	constraints
		inherent_aspect <-- @Inherent_Achievement
		communicator <-- @Animate
		audience <-- @Animate


schema Say
	subcase of Communication
	constraints
		inherent_aspect <-- @Inherent_Achievement
		communicator <-- @Animate


schema Talk_On_Phone
	subcase of Communication
	constraints
		inherent_aspect <-- @Inherent_Activity
		communicator <-- @Animate
		audience <-- @Animate

schema Tell
	subcase of Communication
	constraints
		inherent_aspect <-- @Inherent_Achievement
		communicator <-- @Animate
		audience <-- @Animate


schema Permit
	subcase of Communication
	constraints
		inherent_aspect <-- @Inherent_Achievement
		communicator <-- @Animate
		audience <-- @Animate


//===================================
// Transfer
//===================================

schema Buy
	subcase of Transfer
	evokes Obtainment as obtain
	constraints
		inherent_aspect <-- @Inherent_Achievement
		giver <-- @Animate
		recipient <-- @Animate
		theme <-- @Manipulable_Inanimate_Object
		obtain.obtainer <--> recipient
		obtain.obtained <--> theme


schema Exchange
	subcase of Transfer
	evokes Complex_Process as cp
	evokes Transfer as transfer2
	evokes Obtainment as obtain
	evokes Obtainment as obtain2
	roles
		exchanger1 : @Animate
		exchanger2 : @Animate
		theme1 : @Manipulable_Inanimate_Object
		theme2 : @Manipulable_Inanimate_Object
	constraints
		inherent_aspect <-- @Inherent_Achievement
		self <--> cp.process1
		transfer2 <--> cp.process2
		giver <--> exchanger1
		recipient <--> exchanger2
		theme <--> theme1
		transfer2.giver <--> exchanger2
		transfer2.recipient <--> exchanger1
		transfer2.theme <--> theme2
		obtain.obtainer <--> exchanger2
		obtain.obtained <--> theme1
		obtain2.obtainer <--> exchanger1
		obtain2.obtained <--> theme2


schema Give
	subcase of Transfer
	evokes Obtainment as obtain
	constraints
		inherent_aspect <-- @Inherent_Achievement
		giver <-- @Animate
		recipient <-- @Animate
		theme <-- @Manipulable_Inanimate_Object
		obtain.obtainer <--> recipient
		obtain.obtained <--> theme


schema Feed
	subcase of Transfer
	evokes Eat as eat
	constraints
		inherent_aspect <-- @Inherent_Activity
		giver <-- @Animate
		recipient <-- @Animate
		theme <-- @Food
		theme <--> eat.ingested
		recipient <--> eat.ingester


schema Offer
	subcase of Transfer
	constraints
		inherent_aspect <-- @Inherent_Achievement
		giver <-- @Animate
		recipient <-- @Animate
		theme <-- @Manipulable_Inanimate_Object


schema Return
	subcase of Transfer
	constraints
		inherent_aspect <-- @Inherent_Achievement
		giver <-- @Animate
		recipient <-- @Animate
		theme <-- @Manipulable_Inanimate_Object