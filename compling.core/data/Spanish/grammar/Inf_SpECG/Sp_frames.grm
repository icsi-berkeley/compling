
//schema Possession
//   roles
//   possessor
//   possessed


schema Process   // Process is durative; the Protagonist is not necessarily agentive.
  roles
     protagonist
     x-net : @process

//schema ComplexProcess
//   subcase of Process
//   roles
//      x-net : @complexxnet
//      process1: Process
//      process2: Process
//      protagonist2
//   constraints
//      protagonist <--> process1.protagonist
//      protagonist2 <--> process2.protagonist


// This schema was created for motion verbs, in order to show that Spanish focuses on the initial an 
// final state of motion, instead of focusing on the whole event like English (cf. ME)
//schema ChangeOfState
//  subcase of Process
//   roles
//      undergoer
//      initial_state
//      final_state
//   constraints
//      undergoer <--> protagonist
      

//      
// This schema was created for motion verbs, in order to show that Spanish focuses on the initial an 
// final state of motion, instead of focusing on the whole event like English (cf. ME)   
//
//schema ChangeOfLocationalState
//   subcase of ChangeOfState
//   evokes SPG as spg
//   evokes Motion as mtn      
//    roles
//      mover 
//    constraints
//      mover <--> mtn.mover
//      initial_state <--> spg.source
//      final_state <--> spg.goal

//
// This schema profiles the mover but not the initial or final state of the motion event or process       
//
//schema Motion
//  evokes Process as p
//   roles
//      mover : @entity  
//      speed           // scale
//      heading         // direction 
//      x-net : @motion
//   constraints
//      mover <--> p.protagonist

schema Motion
   subcase of Process 
   evokes TrajectorLandmark as tl
   roles
      mover: @entity  
      speed           // scale
      heading         // place  
      x-net : @motion
   constraints
      mover <--> protagonist
      mover <--> tl.trajector

//schema MotionPath 
//   subcase of Motion
//   evokes SPG as spg
//   constraints  
//      mover <--> spg.trajector
      
      
schema Departing
   subcase of Motion
   evokes SPG as spg
   evokes TrajectorLandmark as tl
   evokes Container as con
      roles
        mover
        source
   constraints
      mover <--> spg.trajector 
//      mover <--> tl.trajector
//      mover <--> protagonist  // This line is to bind the Process role protagonist
      source <--> spg.source
      source <--> tl.landmark
      source <--> con.interior 

 
schema Arriving
   subcase of Motion
   evokes SPG as spg
      roles
        mover
        goal
   constraints
      mover <--> spg.trajector
      goal <--> spg.goal
      mover <--> protagonist // This line is to bind the Process role protagonist


//
// (Bounded) translational motion
//




//schema MotorControl
//   subcase of Process
//   roles
//      actor : @animate
//      effector
//      effort
//      routine : @routine
//   constraints
//      actor <--> protagonist  // protagonist inherited from Process
//      routine <--> x-net


//schema EffectorMotion
//   subcase of ComplexProcess
//   roles
//      routine: @effectormotion
//      process1: MotorControl 
//      process2: Motion
//   constraints
//      process1.effector <--> process2.mover


//schema EffectorMotionPath 
//   subcase of EffectorMotion
//   evokes SPG as spg
//   roles
//      target  
//   constraints
//      target  <--> spg.landmark      
//      process1.effector <--> spg.trajector


//schema ForceTransfer // (physical); revised 9/06/07 
//   evokes Contact as cont
//   roles
//      supplier: @entity    
//      recipient: @entity
//      amount  
//   constraints 
//      supplier <--> cont.entity1
//      recipient <--> cont.entity2   


//schema ForceApplication
//   subcase of MotorControl     
//   evokes ForceTransfer as ft 
//   roles
//      actedUpon: @entity
//      routine : @forceapplication
//      instrument:@instrument
//   constraints
//      actor <-->  ft.supplier
//      actedUpon <--> ft.recipient          
//      instrument <--> effector
//      effort <-->  ft.amount      


//schema ForcefulMotionAction
//   subcase of ComplexProcess
//   roles
//      process1: ForceApplication
//      process2: EffectorMotionPath
//      routine: @forcefulmotionaction    
//   constraints
//      protagonist <--> protagonist2 
//      process1.actedUpon <--> process2.target
//      process1.instrument <--> process2.process1.effector
//      routine <--> x-net


//schema AgentiveImpactAction
//   subcase of ForcefulMotionAction
//   roles
      //routine: @agentiveimpactaction


//schema CauseEffectAction
//   subcase of ComplexProcess 
//   roles
//      process1: ForceApplication
//      process2: Process   // result
//      causer
//      affected
//   constraints
//      protagonist <--> causer
//      protagonist2 <--> affected
//      process1.actedUpon <--> affected
      
   
//schema ObjectTransfer
//  subcase of ComplexProcess
//  roles
//    process1: ReleaseHold
//    process2: EstablishHold
//    giver
//    getter
//    theme
//    x-net: @objecttransfer
//  constraints
//    protagonist <--> giver
//    protagonist2 <--> getter
//    process1.actedUpon <--> theme
//    process2.actedUpon <--> theme



//schema ReleaseHold   //"release", "drop", "let go"
//  subcase of ForceApplication
//     roles
//       routine: @releasehold



//schema EstablishHold  //"grab"
//  subcase of ForceApplication
//     roles
//       routine: @establishhold


//schema CauseMotionPathAction
//  subcase of CauseEffectAction
//  roles
//    process2:MotionPath


//schema Intention
//  roles
//    actor
//    intendedAct:Process


//schema CreationAction
//  subcase of Process
//  roles
//    creator
//    createdThing
//  constraints
//    protagonist <--> creator


//schema ControlVerbProcess
//  subcase of Process
//  roles
//   event


//schema WantProcess
//  subcase of ControlVerbProcess
//  roles
//    wanter
//  constraints
//    wanter <--> protagonist  
