//**************************
//   Ser Aux
//***************************/



//**************************
//   Estar Aux
//***************************/

/*general construction EstarAux
  subcase of Aux
  constructional
     constraints
        self.features.expectedVerbForm <-- Gerund  // PastParticiple this guarantees either V-do (past participles) or V-ndo (gerunds)
   meaning*/
//   	 constraints
// NCC added below for aspect
// There is a problem here. I don't know how to solve it! I'm commenting this line to "fix" the problem
// 	 self.m.eventFeatures <--> StativeProcess



// THIS HAS TO BE FIXED
// The meaning of Estar and está should be related to State, but I don't how to define it in the Ontology.  
// I don't know how to relate State to a more abstract shema!!!
//
/*construction EstarBase
   subcase of EstarAux, BaseForm
   form
      constraints
        self.f.orth <-- "estar"
   meaning
      constraints
     	self.features.verbform <-- Base
		self.m <-- @estar
//      self.m.x-net <-- @estar


construction ESTÁ
   subcase of EstarAux, PresentTense, Singular, ThirdPerson
      form
      constraints
         self.f.orth <-- "está"	*/
//	  meaning : Process


/**************************
***
*** Be Aux Examples
***
***************************/


//general construction BeAux
//  subcase of Aux
//  constructional
//     constraints
//        self.features.expectedVerbForm <-- Participle	// this guarantees either -ed or -ing
 //  meaning
 //  	 constraints
     // NCC added below for aspect
  //	 self.ef.eventStructure <-- StativeProcess

//construction BeBase
//   subcase of BeAux, BaseForm
//   form
//      constraints
//         self.f.orth <-- "be"

//construction BePresent1Sing
//   subcase of BeAux, PresentTense, Singular, FirstPerson
//   form
//      constraints
//         self.f.orth <-- "am"

//construction BePresent3Sing
//   subcase of BeAux, PresentTense, Singular, ThirdPerson
//   form
//      constraints
//         self.f.orth <-- "is"

// separate "are" cxns?
//construction BePresent2Sing
//   subcase of BeAux, PresentTense, SecondPerson, Singular
//   form
//      constraints
//         self.f.orth <-- "are"

//construction BePresentPl
//   subcase of BeAux, PresentTense, Plural
//   form
//      constraints
//         self.f.orth <-- "are"

// separate for 1 and 3 sing?
//construction BePast1Sing
//   subcase of BeAux, PastTense, Singular, FirstPerson
//   form
//      constraints
//         self.f.orth <-- "was"

//construction BePast3Sing
//   subcase of BeAux, PastTense, Singular, ThirdPerson
//   form
//      constraints
//         self.f.orth <-- "was"

//construction BePast2Sing
//   subcase of BeAux, PastTense, Singular, SecondPerson
//   form
//      constraints
//         self.f.orth <-- "were"

//construction BePastPl
//   subcase of BeAux, PastTense, Plural
//   form
//      constraints
//         self.f.orth <-- "were"

//construction BePastPart
//   subcase of BeAux, PastParticiple
//   form
//      constraints
//         self.f.orth <-- "been"

//construction BePresentPart
//   subcase of BeAux, PresentParticiple
//   form
//      constraints
//         self.f.orth <-- "being"


/**************************
***
*** Have Aux Examples
***
***************************/

//general construction HaveAux
//  subcase of Aux
//  constructional
//     constraints
//        self.features.expectedVerbForm <-- PastParticiple
//  meaning
//     constraints
     // NCC added below for aspect
  	 //	self.ef.eventStructure.controlledProcess <-- AfterEffect
 
//construction HaveAuxBase
//   subcase of HaveAux, BaseForm
//   form
//      constraints
//         self.f.orth <-- "have"

//construction HaveAuxPresent1Sing
//   subcase of HaveAux, PresentTense, FirstPerson, Singular
//   form
//      constraints
//         self.f.orth <-- "have"

//construction HaveAuxPresent2Sing
//   subcase of HaveAux, PresentTense, SecondPerson, Singular
//   form
//      constraints
//         self.f.orth <-- "have"

//construction HaveAuxPresent3Sing
//   subcase of HaveAux, PresentTense, ThirdPerson, Singular
//   form
//      constraints
//         self.f.orth <-- "has"

//construction HaveAuxPresentPl
//   subcase of HaveAux, PresentTense, Plural
//   form
//      constraints
//         self.f.orth <-- "have"

//construction HaveAuxPast
//   subcase of HaveAux, PastTense //PastTense sets the speech time and verbform to Past(Finite)
//   form
//      constraints
//         self.f.orth <-- "had"

//construction HaveAuxPresentPart
//   subcase of HaveAux, PresentParticiple
//   form
//      constraints
//         self.f.orth <-- "having"

//construction HaveAuxPastPart
//   subcase of HaveAux, PastParticiple
//   form
//      constraints
//         self.f.orth <-- "had"



/**************************
***
*** Do Aux Examples
***
*** In these examples I follow Sag et al by saying that aux do only occurs in finite forms.
***
***************************/

//general construction DoAux
//  subcase of Aux
//  constructional
//     constraints
//        self.features.expectedVerbForm <-- Base
  //something about aspect should go in the meaning   here? 

//construction DoAuxPresent1stSing
//   subcase of DoAux, PresentTense, Singular, FirstPerson
//   form
//      constraints
//         self.f.orth <-- "do"

//construction DoAuxPresent2ndSing
//   subcase of DoAux, PresentTense, Singular, SecondPerson
//   form
//      constraints
//         self.f.orth <-- "do"

//construction DoAuxPresent3rdSing
//   subcase of DoAux, PresentTense, Singular, ThirdPerson
//   form
//      constraints
//         self.f.orth <-- "does"

//construction DoAuxPresentPlural
//   subcase of DoAux, PresentTense, Plural
//   form
//      constraints
//         self.f.orth <-- "do"

//construction DoAuxPast
//   subcase of DoAux, PastTense 
//   form
//      constraints
//         self.f.orth <-- "did"



/**************************
***
*** A Modal Example
***
***************************/


//construction CouldAux
//   subcase of Aux
//   constructional
//     constraints
//        self.features.verbform <-- Finite
//        self.features.expectedVerbForm <-- Base
//   form
//      constraints
//         self.f.orth <-- "could"
