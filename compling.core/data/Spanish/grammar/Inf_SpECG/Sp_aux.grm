/*********************************************************
*** This file provides a starting point for incorporating
*** auxes into the base grammar. I used Sag, Wasow and Bender's 
*** "Syntactic Theory" as a guide to the linguistics of auxes, but
*** the approach taken here is quite different in that auxes don't 
*** specify and argument structure, and no lexical rules are needed.
***
*** Currently this file does not do the semantics of auxes with
*** the hope that Nancy and Ellen will work the semantics out.
*** However the syntax of auxes should be ok. And by that I mean
*** that the caveats in section 13.2.3 in "Syntactic Theory" are also
*** a problem here.
***
*** Note that general constructions PastTense are (currently) in verb.grm
***
**********************************************************/

//general construction Aux
//   subcase of HasVerbFeatures, Word
//   constructional:AuxFeatures


/**********
***
*** This is the rule that combines a NonFiniteAux with a VP
***
***********/
//construction NonFiniteAuxPlusVP
//  subcase of VP
//  constructional 
//    constituents
//      aux:Aux
//      vp:VP
//    constraints
//      aux.features.verbform <-- NonFinite
//      self.features <--> aux.features 
//      aux.features.expectedVerbForm <--> vp.features.verbform
//  form
//    constraints
//       aux.f meets vp.f //is this right?
//  meaning
//    constraints
//      self.m <--> vp.m //I assume the semantics comes from the vp
//      ed <--> vp.ed
      //how should the semantics of the aux interact with this cxn?


/**********
***
*** This is the rule that combines a FiniteAux with a VP. 
*** Note that this rule is not used for inversion.
***
*** Motivation for this rule being separate from the NonFiniteAux 
*** rule is that optional polarity items like "not", "so" and "too"
*** can (sort of) only occur after the finite aux, and the vp consituent
*** can be elided in this rule, but not the NonFinite rule.
*** Additionally, since modals only occur as finite verbs, this covers 
*** the modals at the front constraint for free.
***
***********/
//construction FiniteAuxPlusVP
//  subcase of VP
//  constructional 
//    constituents
//      aux:Aux
//      vp:VP
//      optional pol:PolarityAdverb
//    constraints
//      aux.features.verbform <-- Finite
//      self.features <--> aux.features 
//      aux.features.expectedVerbForm <--> vp.features.verbform
//  form
//    constraints
//       aux.f before vp.f
//       aux.f meets pol.f
//  meaning
//    constraints
//      self.m <--> vp.m //I assume the semantics comes from the vp
//      ed <--> vp.ed
      //how should the semantics of the aux interact with this cxn?
      //how does the semantics of a polarity item interact with the ED?
//      pol.m.modifiedEntity <--> self.m


/**************************
***
*** Be Aux Examples
***
***************************/


//general construction BeAux
//  subcase of Aux
//  constructional
//     constraints
//        self.features.expectedVerbForm <-- Participle
  //something about aspect should go in the meaning   here? 

//construction BePastSing
//   subcase of BeAux, PastTense, Singular
//   form
//      constraints
//         self.f.orth <-- "was"

//construction BePastPart
//   subcase of BeAux, PastParticiple
//   form
//      constraints
//         self.f.orth <-- "been"

//construction BePresentPart
//   subcase of BeAux, PresentParticiple
//   form
//      constraints
//         self.f.orth <-- "being"

//construction BeBase
//   subcase of BeAux, BaseForm
//   form
//      constraints
//         self.f.orth <-- "be"

/**************************
***
*** Have Aux Examples
***
***************************/

//general construction HaveAux
//  subcase of Aux
//  constructional
//     constraints
//        self.features.expectedVerbForm <-- PastParticiple
  //something about aspect should go in the meaning   here? 

//construction HaveAuxPast
//   subcase of HaveAux, PastTense //PastTense sets the speech time and verbform to Past(Finite)
//   form
//      constraints
//         self.f.orth <-- "had"

//construction HaveAuxBase
//   subcase of HaveAux, BaseForm
//   form
//      constraints
//         self.f.orth <-- "have"

/**************************
***
*** Do Aux Examples
***
*** In these examples I follow Sag et al by saying that aux do only occurs in finite forms.
***
***************************/

//general construction DoAux
//  subcase of Aux
//  constructional
//     constraints
//        self.features.expectedVerbForm <-- Base
  //something about aspect should go in the meaning   here? 

//construction DoAuxPast
//   subcase of DoAux, PastTense 
//   form
//      constraints
//         self.f.orth <-- "did"

//construction DoAuxPresent1stSing
//   subcase of DoAux, PresentTense, Singular, FirstPerson
//   form
//      constraints
//         self.f.orth <-- "do"

//construction DoAuxPresent2ndSing
//   subcase of DoAux, PresentTense, Singular, SecondPerson
//   form
//      constraints
//         self.f.orth <-- "do"

//construction DoAuxPresent3rdSing
//   subcase of DoAux, PresentTense, Singular, ThirdPerson
//   form
//      constraints
//         self.f.orth <-- "does"


//construction DoAuxPresentPlural
//   subcase of DoAux, PresentTense, Plural
//   form
//      constraints
//         self.f.orth <-- "do"


/**************************
***
*** A Modal Example
***
***************************/


//construction CouldAux
//   subcase of Aux
//   constructional
//     constraints
//        self.features.verbform <-- Finite
//        self.features.expectedVerbForm <-- Base
//   form
//      constraints
//         self.f.orth <-- "could"
