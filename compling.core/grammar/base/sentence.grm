//
// sentence.grm
//

general construction Utterance
    subcase of RootType // need to review this type 
    constructional 
        constituents
            core: S
            end: EMark  // punctuation like . ! ?
    form 
        constraints  
            core.f meets end.f
    meaning: DiscourseElement
        constraints
          self.m.content <--> core.m
          
          
construction DeclarativeUtterance
    subcase of Utterance // need to review this type 
    constructional 
        constituents
            core: S
            end: PMark
    form 
        constraints  
            core.f meets end.f
    meaning
        constraints
           	self.m.mood <-- "Declarative" // this is where we want mood
 
 

construction QuesDeclUtterance
    subcase of Utterance
    constructional 
        constituents
            core: S-With-Finite-Inversion
            end: QMark  // punctuation  ?
    meaning 
        constraints
            self.m.mood <-- "YN-Question" // this is where we want mood
 
   
construction WHQuesUtterance
    subcase of Utterance
    constructional 
        constituents
            core: SubjWH-Question
            end: QMark  // punctuation like . ! ?
    meaning
        constraints
            self.m.mood <-- "WH-Question" // this is where we want mood
    
construction AddressedQuestion  // replace AddressedUtterance.
    subcase of Utterance
    constructional 
        constituents
        	core: Question 
            addr: NP
            comma: Comma  
    form
        constraints
            addr.f meets comma.f 
            comma.f meets core.f
    meaning
        constraints
            self.m.addressee <--> addr.m  
			   

construction AddressedImperative  // replace AddressedUtterance, only use Imperative.
    subcase of Utterance
    constructional 
        constituents
        	core: Imperative
            addr: NP
            comma: Comma
            end: IMark     
    form
        constraints
            addr.f meets comma.f 
            comma.f meets core.f
    meaning
        constraints
            self.m.addressee <--> addr.m  // also profiledParticipant
			self.m.mood <-- "Imperative" 
			core.m.profiledParticipant <--> self.m.addressee
			
// Punctuation

general construction EMark 
    subcase of Word

construction PMark
    subcase of EMark
    form 
        constraints
            self.f.orth <-- "."
            
construction QMark
    subcase of EMark
    form 
        constraints
            self.f.orth <-- "?"
            
construction IMark
    subcase of EMark
    form 
        constraints
            self.f.orth <-- "!"

construction Comma
    subcase of Word
    form 
        constraints
            self.f.orth <-- ","
            

// The general cxn S is the root of most (all?) speech acts***/

general construction S
    subcase of RootType // Maybe not?  TODO!!
    meaning: EventDescriptor

general construction ComplexS // several kinds
    subcase of S 
	meaning: ComplexED

construction SerialS // several kinds
    subcase of ComplexS 
	constructional 
        constituents
         s1:S
         conj:SerialConjunction
         s2:S
      form
        constraints
	       s1.f before conj
	       conj before s2.f
        meaning: SerialED
        constraints
        	self.m.ed1 <--> s1.m
        	self.m.ed2 <--> s2.m
			self.m.connective <--> conj.m
			 
                
construction Imperative
    subcase of S
    constructional 
        constituents
            vp: VP
        constraints 
            vp.features.verbform <-- Base
    meaning
        constraints
            self.m <--> vp.ed

/*      
construction TemporalImperative  // embedded VP for (temporal) tag
    subcase of Imperative
    constructional 
        constituents
            tvp: TemporalVP  // generalize to purpose, etc.
        constraints 
            tvp.vp.features.verbform <-- Base  // one level deeper
    meaning
        constraints
            self.m <--> tvp.ed
*/

// This general cxn does the agreement between subj and verb
general construction S-With-Subj
    subcase of S
    constructional
        constituents
            subj: NP
            fin: HasVerbFeatures
        constraints
        	//fin.features.verbform <-- Finite	
        	subj.features.person <--> fin.features.person
        	subj.features.number <--> fin.features.number
            subj.features.case <-- "nom"		// TODO: Why?
    meaning
        constraints
	       subj.m <--> self.m.profiledParticipant
		   

construction Declarative
    subcase of S-With-Subj
    constructional
        constituents
	       fin: VP
    form
        constraints
	       subj.f before fin.f
    meaning
        constraints
           self.m <--> fin.ed

general construction Question
    subcase of S-With-Subj
    
construction SubjWH-Question
    subcase of Question
    constructional
        constituents
           subj: WH-NP
    	   fin: VP
        constraints
    form
        constraints
	       subj.f before fin.f
    meaning
        constraints
	       self.m <--> fin.ed


general construction S-With-Finite-Inversion
	subcase of Question


general construction S-With-Aux-Inversion  // TODO "has he moved ?"
    subcase of Question
    constructional
        constituents
        	fin: Aux  // fin.features.verbForm  Finite from S-With-Subj
        	vp: VP
        constraints
            fin.features.expectedVerbForm <--> vp.features.verbform 
    form
        constraints
            fin.f meets subj.f 
            subj.f before vp.f
    meaning //ED
        constraints
            //vp.m.ed-parent <--> self.m  if needed
            self.m <--> vp.ed
			fin.m <--> self.m.eventProcess.p-features

 construction S-With-Do-Inversion
    subcase of S-With-Aux-Inversion
    constructional
        constituents
        	fin: DoAux 

// Was the box moving / being moved?
construction S-With-BeProgressive-Inversion
    subcase of S-With-Aux-Inversion 
    constructional
        constituents
        	fin: BeAux 
        constraints
            vp.features.verbform <-- PresentParticiple
    meaning  
        constraints
			fin.m.progressive <-- "yes"

// Was the box moved?
construction S-With-BePassive-Inversion
    subcase of S-With-Aux-Inversion     
      constructional
        constituents
        	fin: BeAux // not Get  verbForm <-- Finite is inherited from S-With-Subj
        constraints
            vp.features.verbform <-- PastParticiple   
       meaning  
        constraints
			fin.m.voice <-- @passive  



construction S-With-Modal-Inversion
    subcase of S-With-Finite-Inversion
    constructional
        constituents
        	fin: Modal
        	vp: VP
        constraints
            //modal.features.expectedVerbForm <--> vp.features.VerbForm
           vp.features.verbform <-- Base 
    form
        constraints
            fin.f meets subj.f 
            subj.f before vp.f
    meaning  // inherited meaning: EventDescriptor
        constraints
            vp.ed <--> self.m
			fin.m <--> self.m.e-features


construction S-With-Copula-Inversion-PP //special case
    subcase of S-With-Finite-Inversion
    constructional
        constituents
    	   fin: Copula
    	   pp: LocPrepPhrase //generalize !!
        constraints
            //fin.features.expectedVerbForm <--> vp.features.verbform 
    form
        constraints
            fin.f meets subj.f 
            subj.f before pp.f
    meaning
        constraints
            //fin.ed <--> self.m


construction S-With-Copula-Inversion-Adj //special case
    subcase of S-With-Finite-Inversion
    constructional
        constituents
    	   fin: Copula
    	   adj: Adjective 
        constraints
            //fin.features.expectedVerbForm <--> vp.features.verbform 
    form
        constraints
            fin.f meets subj.f 
            subj.f before adj.f
    meaning
        constraints
    		self.fin.m.actionary <-- @be2
        	self.fin.m.stayer <--> self.m.profiledParticipant
        	self.adj.m.modifiedThing <--> self.m.profiledParticipant
			self.fin.m.state <--> adj.m
			self.m.eventProcess <--> fin.m

construction S-With-Copula-Inversion-NP // special case
    subcase of S-With-Finite-Inversion
    constructional
        constituents
    	   fin: Copula
    	   np: NP
        constraints
    form
        constraints
            fin.f meets subj.f 
            subj.f before np.f
    meaning
	    evokes PredicateNom as pn
        constraints
	        self.fin.m.stayer <--> self.m.profiledParticipant
	        pn.modifier <--> np.m
	        self.fin.m <--> pn
			self.m.eventProcess <--> fin.m




