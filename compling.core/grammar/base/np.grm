/******************************************************************************
This file contains (possible) constructions for kernel noun phrases.

The assumption is that each NP has an RD structure as its meaning.
This implies that proper nouns, pronouns, and mass/plural nouns make
RD their meaning. For sake of uniformity, we also assume that common
count nouns (which are not NPs) also denote an RD.

Semantically, adjectives, noun modifiers and post-nominal modifiers form a 
constellation of modifiers around the primary RD for the NP. Each modifier 
binds the referent role of the entity that it's modifying to its modifiedEntity 
role.

Additionally, the givenness role should be inspected and evaluated for the
different types of NPs, and this file has "?" when Johno didn't know what value to
assign a role.

******************************************************************************/


/***
 ***
 *** The root constructions of the NP, Noun and Nominal  hierarchy
 ***
 ***/

general construction NP
   subcase of RootType, HasNominalFeatures
   meaning: RD

general construction ProcessNP
	subcase of NP
	meaning: ProcessRD

schema Location2D
	subcase of RD		 
	roles
		xCoord: @number
		yCoord: @number
	constraints
		ontological-category <-- @location
 		number <-- "1"

construction Tag
	subcase of Word, HasAgreementFeatures
	form
    	constraints
			self.f.orth <-- "location"
	
construction LocationNP
	subcase of Kernel, NP
  	constructional
    	constituents
		  	tag: Tag
			x: Number
			optional comma: Comma
			y: Number
	form
    	constraints
      		tag.f meets x.f
			x.f meets comma.f
			comma.f meets y.f
  meaning: Location2D
    	constraints
      		self.m.xCoord <--> x.m.value
			self.m.yCoord <--> y.m.value

// This is the root of nouns and noun noun compounds
general construction Nominal 
   subcase of HasNominalFeatures
   meaning: RD 

general construction ProcessNominal 
   subcase of Nominal
   meaning: ProcessRD 

general construction Noun
   subcase of Word, Nominal 


/*
 *
 * Combining Adjectives and Nouns
 *
 */

// Note that Kernel is NOT an NP
// it is  general because we need a supertype to cover the bracketed phrases in
// 'the [big table]'  and 'the [big table and leather chair]'

general construction Kernel
   subcase of HasNominalFeatures
   meaning: RD

construction  SimpleKernel 
  subcase of Kernel
  constructional
    constituents
      optional ap: Adjective // seems OK now
      n: Nominal
    constraints
      self.features <--> n.features
  form
    constraints
      ap.f meets n.f
  meaning
    constraints
      self.m <--> n.m
      self.m <--> ap.m.modifiedThing

construction  DeverbalKernel 
  subcase of Kernel
  constructional
    constituents
      optional ap: Adjective
      n: BaseForm
  form
    constraints
      ap.f meets n.f
  meaning: ProcessRD
    constraints
      self.m.action <--> n.m
      self.m <--> ap.m.modifiedThing

	
construction NP-ModifierPP
  subcase of NP
  constructional
    constituents   
      snp: SpecifierPlusKernel
      modpp: ModifierPP
   constraints
      self.features <--> snp.features
  form
    constraints
      snp.f meets modpp.f
  meaning
  	constraints
	  snp.m <--> modpp.m.modifiedThing
	  self.m <--> snp.m	
	  
	  
 general construction SpecifierPlusKernel
  subcase of NP
  constructional
    constituents   
      s: NPSpecifier
      k: Kernel
    constraints
      self.features <--> k.features
      self.features <--> s.features
  form
    constraints
      s.f meets k.f
  meaning
    constraints
      self.m <--> k.m
      self.m <--> s.m
      
/*
 general construction SpecifierPlusDeverbalKernel
  subcase of ProcessNP
  constructional
    constituents   
      s: NPSpecifier
      k: DeverbalKernel
    constraints
      self.features <--> k.features
      self.features <--> s.features
  form
    constraints
      s.f meets k.f
  meaning
    constraints
      self.m <--> k.m
      self.m <--> s.m
  */    

construction DeterminerPlusKernel
  subcase of SpecifierPlusKernel
  constructional
    constituents   
      s: Determiner  
/*
construction DeterminerPlusDeverbalKernel
  subcase of SpecifierPlusDeverbalKernel
  constructional
    constituents   
      s: Determiner  
*/

// J. separated PossessivePronounPlusKernel because the likelihood of omitting the
// kernel is nonzero with possessive pronouns (e.g. 'I want the'* vs. 'I want his')



construction PossessivePronounPlusKernel
  subcase of SpecifierPlusKernel
  constructional
    constituents   
      s: PossessivePronoun
      k: Kernel // here is where we would specify the higher likelihood of an omitted kernel given a PossPronoun


construction  UndeterminedNP
  subcase of NP, SimpleKernel
  constructional
    constraints
      n.features.massOrPlural <-- "yes"      
  meaning
    constraints
      self.m.givenness <-- "type-identifiable" // Michael


construction QuantityNP
	subcase of Kernel, NP
  	constructional
    	constituents
	  		num: Quantifier	
      		n: Nominal
    	constraints
      		self.features <--> n.features
  	form
    	constraints
      		num.f meets n.f
  	meaning: QuantifiedRD
    	constraints
      		self.m <--> n.m
      		self.m.quant <--> num.m

 construction SpatialQuantityNP
  subcase of QuantityNP
  meaning: QuantifiedSpatialRD
    constraints
	self.m.units <-> n.m.ontological-category
	
construction TemporalQuantityNP
	subcase of QuantityNP	
	meaning: QuantifiedRD
    	constraints
    	n.m.ontological-category <-- @time		

construction  ProcessUndeterminedNP
  subcase of ProcessNP, DeverbalKernel
  meaning
    constraints
      self.m.givenness <-- "type-identifiable" // Michael



/**
***
*** Building Noun Noun Compounds
*** Note that this construction allows for both left and right branching.
***
*** One way to extend this would be to make this construction general, 
*** and then make subcases of it for the productive kinds of noun-noun
*** modification and the lexicalized noun-noun compound
***
***/

construction NounNounCompound
   subcase of Nominal
   constructional
      constituents
        mod: Nominal
        head: Nominal
      constraints
        self.features <--> head.features
   form
     constraints
       mod.f meets head.f
   meaning
     evokes NounNounModifier as nnm
     constraints
       self.m <--> head.m     
       nnm.modifiedThing <--> head.m
       nnm.modifier <--> mod.m       


/***
 *** WH NPs can be be wh pronouns or NPs in which 'which' and 'what' are the specifiers
 ***
 ***/

general construction WH-NP
   subcase of NP

construction WhSpecifierPlusKernel
  subcase of SpecifierPlusKernel, WH-NP
  constructional
    constituents   
      s: WH-Specifier
