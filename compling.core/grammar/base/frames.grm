


schema Process
	roles
		kind: @process-kind	// still not used
    	protagonist: RD
      	actionary: @process	
      	p-features: ProcessFeatures
		

schema ProcessFeatures
	roles
		tense: @tense 	// one of past, present, future
		perfect 		// yes or blank
		progressive 	// yes or blank
		//lexicalAspect 	// state, punctual, activity, achievement, accomplishment
		timeUnits: @temporal-units  //@minutes, @seconds
		voice: @voice	
		negated  		// yes or blank	

schema StagedProcess 
  subcase of Process
	roles
		stageRole: @stage  // @stop, 		

schema PerfomAction // used with LightVerb -tested? TODO !!!
	subcase of Process
	roles
		repetitions
		actor
		action
	constraints
		actor <--> protagonist 
	
schema Stasis
   subcase of Process 
   roles
      stayer: RD 	// used to be @entity  
      state 		// untyped here
      actionary: @stasis // copula, etc.
   constraints
      stayer <--> protagonist


schema PredicateNom
	subcase of Stasis
   	roles
		modifier: RD	

schema ComplexProcess
   subcase of Process
   roles
   	  complexKind: @process-kind	//not used
      actionary: @complexxnet
      process1: Process
      process2: Process
      protagonist2
   constraints
      protagonist <--> process1.protagonist
      protagonist2 <--> process2.protagonist

schema ConjProcess  
   subcase of ComplexProcess
   roles
    	connective  // and or etc.
     	process1: Process //ComplexProcess
     	process2: Process //ComplexProcess


schema SerialProcess  // in frames.grm ?? use kind role of Process?
   subcase of ComplexProcess
   roles
   	  connective
      actionary: @complexxnet  //Ontology, ?add @serialxnet OR @serialaction
      process1: Process // inherited
      process2: Process // inherited
      protagonist2 // inherited
   constraints
      protagonist <--> process1.protagonist
      protagonist2 <--> process2.protagonist
      complexKind <-- @serial
  
  schema PurposeProcess  // in frames.grm 
   subcase of SerialProcess
   roles
   	  connective
   constraints
      protagonist <--> process1.protagonist
	  protagonist <--> protagonist2
	  ignore complexKind <-- @serial
	  complexKind <-- @purpose
      

schema Motion
   subcase of Process 
   roles
      mover: RD  
      speed          // scale
      heading		// untyped, North, towards Box2 
      actionary: @motion
   constraints
      mover <--> protagonist
      

schema MotionPath // (bounded) translational motion
   subcase of Motion
   evokes SPG as spg
   constraints  
      mover <--> spg.trajector

schema HeadingSchema
   roles
 	  tag: @heading
      landmark: RD 
      
schema MotorControl
   subcase of Process
   roles
      actor: RD 
      effector
      effort
      routine : @routine
   constraints
   	  actor.ontological-category <-- @animate
      actor <--> protagonist  // protagonist inherited from Process
      routine <--> actionary

schema MoveBodyPart
	subcase of MotorControl
	
	
schema EffectorMotion
   subcase of ComplexProcess
   roles
      routine: @effectormotion
      process1: MotorControl 
      process2: Motion
   constraints
      process1.effector <--> process2.mover

schema EffectorMotionPath 
   subcase of EffectorMotion
   evokes SPG as spg
   roles
      target  
   constraints
      target  <--> spg.landmark      
      process1.effector <--> spg.trajector

// (physical); revised 9/06/07 
schema ForceTransfer 
   evokes Contact as cont
   roles
      supplier: RD // @entity    
      recipient: RD // @entity
      amount  
   constraints 
   	  // no replacement for the above since Contact constrains
   	  // entity{1,2}.referent to @entity
      supplier <--> cont.entity1
      recipient <--> cont.entity2   

schema ForceApplication
   subcase of MotorControl     
   evokes ForceTransfer as ft 
   roles
      actedUpon: RD // @entity
      routine : @forceapplication
      instrument: RD // @instrument
   constraints
      actor <-->  ft.supplier
      actedUpon <--> ft.recipient          
      instrument <--> effector
      effort <-->  ft.amount      

schema ForcefulMotionAction
   subcase of ComplexProcess
   roles
      process1: ForceApplication
      process2: EffectorMotionPath
      routine: @forcefulmotionaction    
   constraints
      protagonist <--> protagonist2 
      process1.actedUpon <--> process2.target
      process1.instrument <--> process2.process1.effector
      routine <--> actionary

schema AgentiveImpactAction
   subcase of ForcefulMotionAction
   roles
      //routine: @agentiveimpactaction

//  Interaction   *****************

schema InteractionProcess  //general
   subcase of ComplexProcess 
   	roles
      process1: EmbeddedEventProcess  //inherited
      process2: Process  //inherited  
      protagonist: RD
      other: RD
   	constraints
      protagonist2 <--> other
      complexKind <-- @interaction
	  protagonist.ontological-category <-- @sentient
	
schema AgentAgentProcess  
   subcase of InteractionProcess 
	roles
	constraints
		other.ontological-category <-- @sentient	

schema CauseEffectAction
   subcase of ComplexProcess 
   roles
      process1: ForceApplication
      process2: Process   // result
      causer
      affected
   constraints
      protagonist <--> causer
      protagonist2 <--> affected
      process1.actedUpon <--> affected
      complexKind <-- @causal

schema ObjectTransfer
  subcase of ComplexProcess
  roles
    process1: ReleaseHold
    process2: EstablishHold
    giver
    getter
    theme
    actionary: @objecttransfer
  constraints
    protagonist <--> giver
    protagonist2 <--> getter
    process1.actedUpon <--> theme
    process2.actedUpon <--> theme


schema ReleaseHold   //"release", "drop", "let go"
  subcase of ForceApplication
     roles
       routine: @releasehold


schema EstablishHold  //"grab"
  subcase of ForceApplication
     roles
       routine: @establishhold


schema CauseMotionPathAction
  subcase of CauseEffectAction
  roles
    process2: MotionPath

schema Possession
   roles
	   possessor
	   possessed

schema Intention
  roles
    actor
    intendedAct: Process


schema CreationAction
  subcase of Process
  roles
    creator
    createdThing
  constraints
    protagonist <--> creator


schema EmbeddedEventProcess
  subcase of Process
  roles
  	event

schema Value
roles
  	val
  	
schema WantProcess
  subcase of EmbeddedEventProcess
  roles
    wanter
  constraints
    wanter <--> protagonist  


