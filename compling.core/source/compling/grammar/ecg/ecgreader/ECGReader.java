
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Tue Jan 20 10:02:43 PST 2015
//----------------------------------------------------

package compling.grammar.ecg.ecgreader;

import java.util.HashSet;
import java.util.LinkedHashSet;
import java_cup.runtime.Symbol;
import compling.grammar.ecg.ECGConstants;
import compling.grammar.ecg.Grammar;
import compling.grammar.ecg.Grammar.Block;
import compling.grammar.ecg.Grammar.Construction;
import compling.grammar.ecg.Grammar.ECGSlotChain;
import compling.grammar.ecg.Grammar.MapPrimitive;
import compling.grammar.ecg.Grammar.Schema;
import compling.grammar.ecg.Grammar.Situation;
import compling.grammar.unificationgrammar.UnificationGrammar.Constraint;
import compling.grammar.unificationgrammar.UnificationGrammar.Role;
import compling.grammar.unificationgrammar.UnificationGrammar.TypeConstraint;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Tue Jan 20 10:02:43 PST 2015
  */
public class ECGReader extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ECGReader() {super();}

  /** Constructor which sets the default scanner. */
  public ECGReader(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\004\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\004\003\000" +
    "\002\027\004\000\002\027\003\000\002\022\010\000\002" +
    "\022\005\000\002\030\004\000\002\030\002\000\002\024" +
    "\007\000\002\024\004\000\002\024\002\000\002\025\005" +
    "\000\002\025\004\000\002\025\002\000\002\026\007\000" +
    "\002\026\004\000\002\026\002\000\002\031\004\000\002" +
    "\031\004\000\002\031\003\000\002\023\010\000\002\023" +
    "\005\000\002\046\003\000\002\047\004\000\002\050\003" +
    "\000\002\051\004\000\002\043\004\000\002\043\003\000" +
    "\002\042\010\000\002\042\005\000\002\045\004\000\002" +
    "\045\003\000\002\044\010\000\002\044\005\000\002\005" +
    "\003\000\002\005\002\000\002\003\003\000\002\003\004" +
    "\000\002\006\005\000\002\006\004\000\002\033\003\000" +
    "\002\033\003\000\002\007\006\000\002\013\004\000\002" +
    "\013\002\000\002\010\004\000\002\037\004\000\002\037" +
    "\002\000\002\014\003\000\002\014\002\000\002\016\004" +
    "\000\002\016\003\000\002\011\007\000\002\011\007\000" +
    "\002\011\006\000\002\034\005\000\002\034\002\000\002" +
    "\041\003\000\002\041\005\000\002\041\007\000\002\015" +
    "\003\000\002\015\002\000\002\017\004\000\002\017\003" +
    "\000\002\021\003\000\002\021\002\000\002\020\005\000" +
    "\002\020\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\040\003\000\002\040\002\000\002\036" +
    "\003\000\002\036\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\030\002\ufffa\003\005\004\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\035\ufffa\036\ufffa\040\ufffa\041\ufffa" +
    "\001\002\000\026\002\021\004\016\007\010\010\024\011" +
    "\026\012\007\035\031\036\032\040\006\041\020\001\002" +
    "\000\026\002\ufff9\004\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\035\ufff9\036\ufff9\040\ufff9\041\ufff9\001\002\000\004" +
    "\042\uffdf\001\002\000\004\042\uffe2\001\002\000\004\042" +
    "\uffe7\001\002\000\026\002\ufffb\004\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\035\ufffb\036\ufffb\040\ufffb\041\ufffb\001" +
    "\002\000\004\042\214\001\002\000\026\002\uffff\004\uffff" +
    "\007\uffff\010\uffff\011\uffff\012\uffff\035\uffff\036\uffff\040" +
    "\uffff\041\uffff\001\002\000\004\042\206\001\002\000\026" +
    "\002\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\035" +
    "\ufffd\036\ufffd\040\ufffd\041\ufffd\001\002\000\004\042\ufff7" +
    "\001\002\000\004\042\205\001\002\000\004\042\uffdb\001" +
    "\002\000\004\002\000\001\002\000\026\002\001\004\001" +
    "\007\001\010\001\011\001\012\001\035\001\036\001\040" +
    "\001\041\001\001\002\000\004\042\124\001\002\000\010" +
    "\004\122\040\121\041\123\001\002\000\004\042\113\001" +
    "\002\000\004\042\uffe4\001\002\000\004\042\036\001\002" +
    "\000\026\002\ufffc\004\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\035\ufffc\036\ufffc\040\ufffc\041\ufffc\001\002\000\004" +
    "\007\035\001\002\000\004\007\034\001\002\000\026\002" +
    "\ufffe\004\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\035\ufffe" +
    "\036\ufffe\040\ufffe\041\ufffe\001\002\000\004\042\uffe8\001" +
    "\002\000\004\042\uffe9\001\002\000\040\002\uffd7\003\037" +
    "\004\uffd7\005\040\007\uffd7\010\uffd7\011\uffd7\012\uffd7\027" +
    "\uffd7\032\uffd7\034\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7" +
    "\001\002\000\026\002\uffdd\004\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\035\uffdd\036\uffdd\040\uffdd\041\uffdd\001\002" +
    "\000\006\031\112\042\uffd6\001\002\000\034\002\uffce\004" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\027\uffce\032\uffce" +
    "\034\uffce\035\uffce\036\uffce\040\uffce\041\uffce\001\002\000" +
    "\004\042\046\001\002\000\044\002\uffd8\004\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\020" +
    "\044\027\uffd8\032\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8" +
    "\041\uffd8\001\002\000\004\042\045\001\002\000\044\002" +
    "\uffd4\004\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\020\uffd4\027\uffd4\032\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\040\uffd4\041\uffd4\001\002\000\044\002\uffd3" +
    "\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\020\uffd3\027\uffd3\032\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\040\uffd3\041\uffd3\001\002\000\034\002\uffc9\004" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\027\054\032\053" +
    "\034\uffc9\035\uffc9\036\uffc9\040\uffc9\041\uffc9\001\002\000" +
    "\032\002\uffca\004\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\034\uffca\035\uffca\036\uffca\040\uffca\041\uffca\042\105\001" +
    "\002\000\042\002\uffcf\004\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\027\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\001\002\000\030" +
    "\002\uffb9\004\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\034" +
    "\064\035\uffb9\036\uffb9\040\uffb9\041\uffb9\001\002\000\032" +
    "\002\uffc7\004\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\040\uffc7\041\uffc7\042\uffc7\001\002" +
    "\000\006\042\057\044\055\001\002\000\046\002\uffd1\004" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\027\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\001\002\000\004\030\060" +
    "\001\002\000\046\002\uffd2\004\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\027\uffd2\030\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\001\002\000\004\042\061\001\002\000\042\002\uffd0" +
    "\004\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\027\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\040\uffd0\041\uffd0\001\002\000\026\002\uffde\004\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\035\uffde\036\uffde\040\uffde" +
    "\041\uffde\001\002\000\040\002\uffba\004\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\035\uffba\036\uffba" +
    "\037\066\040\uffba\041\uffba\042\uffb2\046\uffb2\001\002\000" +
    "\040\002\uffb7\004\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\046\uffb7\001\002\000\006\042\070\046\067" +
    "\001\002\000\006\042\uffb3\046\uffb3\001\002\000\050\002" +
    "\uffb0\004\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\025\uffb0\026\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\046\uffb0\001\002" +
    "\000\050\002\uffb1\004\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\025\uffb1\026\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\046" +
    "\uffb1\001\002\000\012\015\073\016\076\025\077\026\074" +
    "\001\002\000\040\002\uffb8\004\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\046\uffb8\001\002\000\006\042" +
    "\uffb5\046\uffb5\001\002\000\006\042\uffb6\046\uffb6\001\002" +
    "\000\006\042\070\046\067\001\002\000\006\042\uffb4\046" +
    "\uffb4\001\002\000\012\042\070\043\101\044\100\046\067" +
    "\001\002\000\040\002\uffac\004\uffac\007\uffac\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\014\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\046\uffac\001\002\000\040\002" +
    "\uffab\004\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\046\uffab\001\002\000\040\002\uffad\004\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\046\uffad\001\002" +
    "\000\040\002\uffae\004\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\014\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\046\uffae\001\002\000\040\002\uffaf\004" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\046" +
    "\uffaf\001\002\000\034\002\uffcb\004\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\017\107\034\uffcb\035\uffcb\036\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\001\002\000\032\002\uffc8\004\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\001\002\000\006\042\057" +
    "\044\055\001\002\000\032\002\uffcd\004\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\001\002\000\032\002\uffcc\004\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\001\002\000\004\042\uffd5\001" +
    "\002\000\040\002\uffd7\003\114\004\uffd7\005\040\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\027\uffd7\032\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\040\uffd7\041\uffd7\001\002\000\026\002\uffe5" +
    "\004\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\035\uffe5\036" +
    "\uffe5\040\uffe5\041\uffe5\001\002\000\034\002\uffce\004\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\027\uffce\032\uffce\034" +
    "\uffce\035\uffce\036\uffce\040\uffce\041\uffce\001\002\000\034" +
    "\002\uffc9\004\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\027" +
    "\054\032\053\034\uffc9\035\uffc9\036\uffc9\040\uffc9\041\uffc9" +
    "\001\002\000\030\002\uffb9\004\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\034\064\035\uffb9\036\uffb9\040\uffb9\041\uffb9" +
    "\001\002\000\026\002\uffe6\004\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\035\uffe6\036\uffe6\040\uffe6\041\uffe6\001\002" +
    "\000\004\042\uffe0\001\002\000\004\042\ufff8\001\002\000" +
    "\004\042\uffdc\001\002\000\040\002\uffd7\003\125\004\uffd7" +
    "\005\040\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7\001\002" +
    "\000\026\002\ufff5\004\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\035\ufff5\036\ufff5\040\ufff5\041\ufff5\001\002\000\034" +
    "\002\ufff0\004\ufff0\006\130\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\035\ufff0\036\ufff0\040\ufff0\041\ufff0" +
    "\001\002\000\032\002\uffed\004\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\171\014\uffed\035\uffed\036\uffed\040\uffed" +
    "\041\uffed\001\002\000\044\002\ufff3\003\131\004\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\017\132" +
    "\027\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\040\ufff3\041" +
    "\ufff3\001\002\000\032\002\ufff1\004\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\035\ufff1\036\ufff1\040" +
    "\ufff1\041\ufff1\001\002\000\006\042\057\044\055\001\002" +
    "\000\040\002\uffce\004\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\027\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\040\uffce\041\uffce\001\002\000\040\002\uffbd\004" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\027\054\033\136\034\uffbd\035\uffbd\036\uffbd\040\uffbd\041" +
    "\uffbd\001\002\000\042\002\uffbe\004\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\023\141\024\142\034" +
    "\uffbe\035\uffbe\036\uffbe\040\uffbe\041\uffbe\042\143\001\002" +
    "\000\042\002\uffbb\004\uffbb\007\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\023\uffbb\024\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\040\uffbb\041\uffbb\042\uffbb\001\002\000\034\002" +
    "\uffb9\004\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\034\064\035\uffb9\036\uffb9\040\uffb9\041\uffb9\001" +
    "\002\000\032\002\ufff2\004\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\035\ufff2\036\ufff2\040\ufff2\041" +
    "\ufff2\001\002\000\004\042\164\001\002\000\004\042\160" +
    "\001\002\000\004\017\145\001\002\000\042\002\uffbc\004" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\023\uffbc\024\uffbc\034\uffbc\035\uffbc\036\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\001\002\000\004\042\146\001\002\000\044" +
    "\002\uffc2\004\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\021\147\023\uffc2\024\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\040\uffc2\041\uffc2\042\uffc2\001\002\000\004\045" +
    "\152\001\002\000\042\002\uffc4\004\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\014\uffc4\023\uffc4\024\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4\001\002" +
    "\000\004\022\157\001\002\000\006\020\153\022\uffc1\001" +
    "\002\000\004\045\154\001\002\000\006\020\155\022\uffc0" +
    "\001\002\000\004\045\156\001\002\000\004\022\uffbf\001" +
    "\002\000\042\002\uffc3\004\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\023\uffc3\024\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\040\uffc3\041\uffc3\042\uffc3\001\002\000\004" +
    "\017\161\001\002\000\004\042\162\001\002\000\044\002" +
    "\uffc2\004\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\021\147\023\uffc2\024\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\001\002\000\042\002\uffc5" +
    "\004\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\023\uffc5\024\uffc5\034\uffc5\035\uffc5\036\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\001\002\000\004\017\165\001\002\000" +
    "\004\042\166\001\002\000\044\002\uffc2\004\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\021\147\023" +
    "\uffc2\024\uffc2\034\uffc2\035\uffc2\036\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\001\002\000\042\002\uffc6\004\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\023\uffc6\024\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\001" +
    "\002\000\042\002\ufff4\004\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\027\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\040\ufff4\041\ufff4\001\002\000\036" +
    "\002\ufff3\003\202\004\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\014\ufff3\017\132\034\ufff3\035\ufff3\036\ufff3\040\ufff3" +
    "\041\ufff3\001\002\000\030\002\uffea\004\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\014\174\035\uffea\036\uffea\040\uffea" +
    "\041\uffea\001\002\000\026\002\ufff6\004\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\035\ufff6\036\ufff6\040\ufff6\041\ufff6" +
    "\001\002\000\040\002\ufff3\003\175\004\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\017\132\027\ufff3\032\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\040\ufff3\041\ufff3\001\002\000\026\002" +
    "\uffeb\004\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\035\uffeb" +
    "\036\uffeb\040\uffeb\041\uffeb\001\002\000\034\002\uffce\004" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\027\uffce\032\uffce" +
    "\034\uffce\035\uffce\036\uffce\040\uffce\041\uffce\001\002\000" +
    "\034\002\uffc9\004\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\027\054\032\053\034\uffc9\035\uffc9\036\uffc9\040\uffc9\041" +
    "\uffc9\001\002\000\030\002\uffb9\004\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\034\064\035\uffb9\036\uffb9\040\uffb9\041" +
    "\uffb9\001\002\000\026\002\uffec\004\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\035\uffec\036\uffec\040\uffec\041\uffec\001" +
    "\002\000\030\002\uffee\004\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\014\uffee\035\uffee\036\uffee\040\uffee\041\uffee\001" +
    "\002\000\032\002\uffb9\004\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\014\uffb9\034\064\035\uffb9\036\uffb9\040\uffb9\041" +
    "\uffb9\001\002\000\030\002\uffef\004\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\014\uffef\035\uffef\036\uffef\040\uffef\041" +
    "\uffef\001\002\000\026\002\uffe1\004\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\035\uffe1\036\uffe1\040\uffe1\041\uffe1\001" +
    "\002\000\040\002\uffd7\003\207\004\uffd7\005\040\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\027\uffd7\032\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\040\uffd7\041\uffd7\001\002\000\026\002\uffd9" +
    "\004\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\035\uffd9\036" +
    "\uffd9\040\uffd9\041\uffd9\001\002\000\034\002\uffce\004\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\027\uffce\032\uffce\034" +
    "\uffce\035\uffce\036\uffce\040\uffce\041\uffce\001\002\000\034" +
    "\002\uffc9\004\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\027" +
    "\054\032\053\034\uffc9\035\uffc9\036\uffc9\040\uffc9\041\uffc9" +
    "\001\002\000\030\002\uffb9\004\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\034\064\035\uffb9\036\uffb9\040\uffb9\041\uffb9" +
    "\001\002\000\026\002\uffda\004\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\035\uffda\036\uffda\040\uffda\041\uffda\001\002" +
    "\000\026\002\uffe3\004\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\004\004\003\001\001\000\032\022\012\023" +
    "\021\027\022\031\024\042\032\043\026\044\014\045\013" +
    "\046\011\047\010\050\016\051\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\041\005\040\006" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\050\014\051\016\047\001\001\000\004\010\105\001" +
    "\001\000\002\001\001\000\006\020\062\021\061\001\001" +
    "\000\002\001\001\000\004\033\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\064\001" +
    "\001\000\002\001\001\000\006\012\071\036\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\103\001\001\000\002\001" +
    "\001\000\006\035\102\036\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\107\001\001\000\002\001\001" +
    "\000\004\033\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\041\005\114\006\042" +
    "\001\001\000\002\001\001\000\004\013\115\001\001\000" +
    "\010\007\050\014\116\016\047\001\001\000\006\020\062" +
    "\021\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\041\005\125" +
    "\006\042\001\001\000\002\001\001\000\004\024\126\001" +
    "\001\000\004\025\171\001\001\000\004\030\132\001\001" +
    "\000\002\001\001\000\004\033\167\001\001\000\004\013" +
    "\133\001\001\000\010\007\050\015\136\017\134\001\001" +
    "\000\004\011\143\001\001\000\002\001\001\000\006\020" +
    "\062\021\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\147\001\001\000\004\041\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\202" +
    "\001\001\000\004\026\172\001\001\000\002\001\001\000" +
    "\004\030\175\001\001\000\002\001\001\000\004\013\176" +
    "\001\001\000\010\007\050\014\177\016\047\001\001\000" +
    "\006\020\062\021\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\062\021\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\041\005\207\006\042" +
    "\001\001\000\002\001\001\000\004\013\210\001\001\000" +
    "\010\007\050\014\211\016\047\001\001\000\006\020\062" +
    "\021\212\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ECGReader$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ECGReader$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ECGReader$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public Grammar grammar = new Grammar();
  public String file = "unknown";
  public StringBuffer errorLog = new StringBuffer();
  
  public String getErrorLog() { return errorLog.toString(); }
  
  public void setGrammar(Grammar g) { grammar = g; }
  
  public Grammar getGrammar() { return grammar; }
  
  //public Location getLocation() { return ((Yylex) getScanner()).getLocation(); }
  
  public int getLineNumber() { return ((Yylex) getScanner()).getLineNumber(); }
  
  @Override 
  public void syntax_error(Symbol cur_token) {
    errorLog.append("\nIn file " +file+",\t"); 
    String yyt = ((Yylex) getScanner()).yytext().trim();
    if (! yyt.equalsIgnoreCase("construction") && ! yyt.equalsIgnoreCase("schema")) {
        errorLog.append("Syntax error at line number "+((Yylex) getScanner()).getLineNumber()); 
        errorLog.append(";   Text of error: "+yyt+"\n");
    } else {
      errorLog.append("Syntax error before line number "+((Yylex) getScanner()).getLineNumber()); 
      errorLog.append("\n");  
    }
  } 
  
  public void structural_error(String message){
    errorLog.append("\t( "+message+" )\n");
  } 


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ECGReader$actions {
  private final ECGReader parser;

  /** Constructor */
  CUP$ECGReader$actions(ECGReader parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ECGReader$do_action(
    int                        CUP$ECGReader$act_num,
    java_cup.runtime.lr_parser CUP$ECGReader$parser,
    java.util.Stack            CUP$ECGReader$stack,
    int                        CUP$ECGReader$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ECGReader$result;

      /* select the action based on the action number */
      switch (CUP$ECGReader$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ident_or_str ::= STR 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = s; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(27/*ident_or_str*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ident_or_str ::= EXTERNALTYPE 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = i; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(27/*ident_or_str*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // constraint ::= slot_chain ASSIGN slot_chain 
            {
              Constraint RESULT = null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String arg2 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    if (arg2.indexOf(".") == -1)
      RESULT = new Constraint(ECGConstants.ASSIGN, new ECGSlotChain(arg1), arg2);
    else
      RESULT = new Constraint(ECGConstants.ASSIGN, new ECGSlotChain(arg1), new ECGSlotChain(arg2)); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(8/*constraint*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // constraint ::= slot_chain ASSIGN ident_or_str 
            {
              Constraint RESULT = null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String arg2 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = new Constraint(ECGConstants.ASSIGN, new ECGSlotChain(arg1), arg2); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(8/*constraint*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // constraint ::= slot_chain not_assign_operator slot_chain 
            {
              Constraint RESULT = null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String arg2 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = new Constraint(op, new ECGSlotChain(arg1), new ECGSlotChain(arg2)); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(8/*constraint*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // slot_chain ::= SLOTCHAIN 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = i; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(28/*slot_chain*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // slot_chain ::= IDENTIFIER 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = i; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(28/*slot_chain*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // opt_ignore ::= 
            {
              Boolean RESULT = null;
		 RESULT=false; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(30/*opt_ignore*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // opt_ignore ::= IGNORE 
            {
              Boolean RESULT = null;
		 RESULT= true; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(30/*opt_ignore*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // not_assign_operator ::= MEETS 
            {
              String RESULT = null;
		 RESULT=ECGConstants.MEETS; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(24/*not_assign_operator*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // not_assign_operator ::= BEFORE 
            {
              String RESULT = null;
		 RESULT=ECGConstants.BEFORE; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(24/*not_assign_operator*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // not_assign_operator ::= IDENTIFY 
            {
              String RESULT = null;
		 RESULT=ECGConstants.IDENTIFY; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(24/*not_assign_operator*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // constraint_list ::= CONSTRAINTS 
            {
              LinkedHashSet<Constraint> RESULT = null;
		 
    RESULT = new LinkedHashSet<Constraint>(); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(14/*constraint_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // constraint_list ::= constraint_list opt_ignore constraint 
            {
              LinkedHashSet<Constraint> RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Constraint> cl = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Constraint c = (Constraint)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    c.setOverridden(i); cl.add(c); RESULT = cl; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(14/*constraint_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // constraint_list_opt ::= 
            {
              LinkedHashSet<Constraint> RESULT = null;
		 
    RESULT = new LinkedHashSet<Constraint>(); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(15/*constraint_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // constraint_list_opt ::= constraint_list 
            {
              LinkedHashSet<Constraint> RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> cl = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = cl; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(15/*constraint_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // constituents_list ::= CONSTITUENTS 
            {
              LinkedHashSet<Role> RESULT = null;
		 
    RESULT = new LinkedHashSet<Role>(); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(13/*constituents_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // constituents_list ::= constituents_list constituent 
            {
              LinkedHashSet<Role> RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> cl = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Role c = (Role)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    cl.add(c); 
    RESULT = cl; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(13/*constituents_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // constituents_list_opt ::= 
            {
              LinkedHashSet<Role> RESULT = null;
		 RESULT = new LinkedHashSet<Role>(); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(11/*constituents_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // constituents_list_opt ::= constituents_list 
            {
              LinkedHashSet<Role> RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Role> cl = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = cl; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(11/*constituents_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prob_list ::= PROB COMMA PROB COMMA PROB 
            {
              StringBuffer RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = new StringBuffer(p1); 
    RESULT.append(" "); 
    RESULT.append(p2); 
    RESULT.append(" "); 
    RESULT.append(p3); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(31/*prob_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prob_list ::= PROB COMMA PROB 
            {
              StringBuffer RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = new StringBuffer(p1); 
    RESULT.append(" "); 
    RESULT.append(p2); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(31/*prob_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prob_list ::= PROB 
            {
              StringBuffer RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = new StringBuffer(p); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(31/*prob_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // opt_constituent_annotation ::= 
            {
              String RESULT = null;
		 
    RESULT = ""; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(26/*opt_constituent_annotation*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // opt_constituent_annotation ::= OPENBRACKET prob_list CLOSEBRACKET 
            {
              String RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		StringBuffer pl = (StringBuffer)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		 
    pl.insert(0, " [ ").append(" ] "); 
    RESULT= pl.toString(); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(26/*opt_constituent_annotation*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // constituent ::= IDENTIFIER COLON IDENTIFIER opt_constituent_annotation 
            {
              Role RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT= new Role(i); 
    RESULT.setTypeConstraint(new TypeConstraint(t, null)); 
    RESULT.setSpecialField(a); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(7/*constituent*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // constituent ::= EXTRAPOSED IDENTIFIER COLON IDENTIFIER opt_constituent_annotation 
            {
              Role RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT= new Role(i); 
    RESULT.setTypeConstraint(new TypeConstraint(t, null)); 
    RESULT.setSpecialField(ECGConstants.EXTRAPOSED+a); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(7/*constituent*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // constituent ::= OPTIONAL IDENTIFIER COLON IDENTIFIER opt_constituent_annotation 
            {
              Role RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT= new Role(i); 
    RESULT.setTypeConstraint(new TypeConstraint(t, null)); 
    RESULT.setSpecialField(ECGConstants.OPTIONAL+a); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(7/*constituent*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // roles_list ::= ROLES 
            {
              LinkedHashSet<Role> RESULT = null;
		 
    RESULT = new LinkedHashSet<Role>(); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(12/*roles_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // roles_list ::= roles_list role 
            {
              LinkedHashSet<Role> RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> rl = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Role r = (Role)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    rl.add(r); RESULT = rl; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(12/*roles_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // roles_list_opt ::= 
            {
              LinkedHashSet<Role> RESULT = null;
		 RESULT = new LinkedHashSet<Role>(); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(10/*roles_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // roles_list_opt ::= roles_list 
            {
              LinkedHashSet<Role> RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Role> cl = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = cl; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(10/*roles_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opt_type ::= 
            {
              TypeConstraint RESULT = null;
		 RESULT = null; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(29/*opt_type*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // opt_type ::= COLON typespec 
            {
              TypeConstraint RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = new TypeConstraint(t, null); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(29/*opt_type*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // role ::= IDENTIFIER opt_type 
            {
              Role RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		TypeConstraint t = (TypeConstraint)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT= new Role(i); 
    if (t != null) { 
      RESULT.setTypeConstraint(t);
    } 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(6/*role*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // evoked_list_opt ::= 
            {
              LinkedHashSet<Role> RESULT = null;
		 RESULT = new LinkedHashSet<Role>(); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(9/*evoked_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // evoked_list_opt ::= evoked_list_opt evoked_element 
            {
              LinkedHashSet<Role> RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Role ee = (Role)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		  
    e.add(ee); 
    RESULT = e; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(9/*evoked_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // evoked_element ::= EVOKES typespec AS IDENTIFIER 
            {
              Role RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT=new Role(n); 
    RESULT.setTypeConstraint(new TypeConstraint(t, null)); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(5/*evoked_element*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // typespec ::= EXTERNALTYPE 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = t; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(25/*typespec*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // typespec ::= IDENTIFIER 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT=t; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(25/*typespec*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parent_list ::= subcase_of_keyword IDENTIFIER 
            {
              HashSet<String> RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = new HashSet<String>(); 
    RESULT.add(i); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(4/*parent_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parent_list ::= parent_list COMMA IDENTIFIER 
            {
              HashSet<String> RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		HashSet<String> pl = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    pl.add(i); 
    RESULT = pl;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(4/*parent_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // subcase_of_keyword ::= SUBCASE OF 
            {
              Object RESULT = null;

              CUP$ECGReader$result = new java_cup.runtime.Symbol(1/*subcase_of_keyword*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // subcase_of_keyword ::= SUBCASE 
            {
              Object RESULT = null;

              CUP$ECGReader$result = new java_cup.runtime.Symbol(1/*subcase_of_keyword*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parent_list_opt ::= 
            {
              HashSet<String> RESULT = null;
		 RESULT = new HashSet<String>(); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(3/*parent_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parent_list_opt ::= parent_list 
            {
              HashSet<String> RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		HashSet<String> pl = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = pl; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(3/*parent_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // situation ::= situation_kinds IDENTIFIER error 
            {
              Situation RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		 
     parser.report_error("map " + n + " has an error", null); 
     RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(34/*situation*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // situation ::= situation_kinds IDENTIFIER parent_list_opt evoked_list_opt roles_list_opt constraint_list_opt 
            {
              Situation RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		HashSet<String> p = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> r = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
    Block block = parser.grammar.new Block(ECGConstants.CONTENTS, n);
    block.setEvokedElements(e);
    block.setElements(r);
    block.setConstraints(c);
    RESULT = parser.grammar.new Situation(n, k, p, block); 
    RESULT.setLocation(new Location(n, parser.file, nleft, nright));
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(34/*situation*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // situation_kinds ::= SITUATION 
            {
              String RESULT = null;
		
    RESULT = ECGConstants.CONCRETE;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(35/*situation_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // situation_kinds ::= ABSTRACT SITUATION 
            {
              String RESULT = null;
		
    RESULT = ECGConstants.ABSTRACT;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(35/*situation_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // map ::= map_kinds IDENTIFIER error 
            {
              MapPrimitive RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		 
     parser.report_error("map " + n + " has an error", null); 
     RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(32/*map*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // map ::= map_kinds IDENTIFIER parent_list_opt evoked_list_opt roles_list_opt constraint_list_opt 
            {
              MapPrimitive RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		HashSet<String> p = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> r = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
    Block block = parser.grammar.new Block(ECGConstants.CONTENTS, n);
    block.setEvokedElements(e);
    block.setElements(r);
    block.setConstraints(c);
    RESULT = parser.grammar.new MapPrimitive(n, k, p, block); 
    RESULT.setLocation(new Location(n, parser.file, nleft, nright));
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(32/*map*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // map_kinds ::= MAP 
            {
              String RESULT = null;
		
    RESULT = ECGConstants.CONCRETE;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(33/*map_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // map_kinds ::= ABSTRACT MAP 
            {
              String RESULT = null;
		
    RESULT = ECGConstants.ABSTRACT;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(33/*map_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // current_import ::= import_kind IDENTIFIER 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
      RESULT = parser.grammar.addImport(n);
    
              CUP$ECGReader$result = new java_cup.runtime.Symbol(39/*current_import*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // import_kind ::= IMPORT 
            {
              String RESULT = null;
		
      RESULT = ECGConstants.IMPORT;
    
              CUP$ECGReader$result = new java_cup.runtime.Symbol(38/*import_kind*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // current_package ::= package_kinds IDENTIFIER 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
     RESULT = parser.grammar.setPackage(n);
   
              CUP$ECGReader$result = new java_cup.runtime.Symbol(37/*current_package*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // package_kinds ::= PACKAGE 
            {
              String RESULT = null;
		
     RESULT = ECGConstants.PACKAGE;
   
              CUP$ECGReader$result = new java_cup.runtime.Symbol(36/*package_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // schema ::= schema_kinds IDENTIFIER error 
            {
              Schema RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		 
     parser.report_error("schema " + n + " has an error", null); 
     RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(17/*schema*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // schema ::= schema_kinds IDENTIFIER parent_list_opt evoked_list_opt roles_list_opt constraint_list_opt 
            {
              Schema RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		HashSet<String> p = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> r = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    Block block = parser.grammar.new Block(ECGConstants.CONTENTS, n);
    block.setEvokedElements(e);
    block.setElements(r);
    block.setConstraints(c);
    RESULT = parser.grammar.new Schema(n, k, p, block);
    RESULT.setPackage(parser.grammar.getPackage()); // (seantrott)
    RESULT.setLocation(new Location(n, parser.file, nleft, nright));
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(17/*schema*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // schema_kinds ::= SCHEMA 
            {
              String RESULT = null;
		 RESULT=ECGConstants.SEMANTIC; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(23/*schema_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // schema_kinds ::= SEMANTIC SCHEMA 
            {
              String RESULT = null;
		 RESULT=ECGConstants.SEMANTIC; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(23/*schema_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // schema_kinds ::= FEATURE SCHEMA 
            {
              String RESULT = null;
		 RESULT= ECGConstants.FEATURE; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(23/*schema_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // meaning_block ::= 
            {
              Block RESULT = null;
		 
    RESULT = parser.grammar.new Block(ECGConstants.MEANING, ECGConstants.UNTYPED);
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(20/*meaning_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // meaning_block ::= MEANING error 
            {
              Block RESULT = null;
		 
    /* parser.report_error("meaning block has an error", null);*/  
    RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(20/*meaning_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // meaning_block ::= MEANING block_type evoked_list_opt roles_list_opt constraint_list_opt 
            {
              Block RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> r = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = parser.grammar.new Block(ECGConstants.MEANING, t);
    RESULT.setEvokedElements(e);
    RESULT.setElements(r);
    RESULT.setConstraints(c);
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(20/*meaning_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // form_block ::= 
            {
              Block RESULT = null;
		 
    RESULT = parser.grammar.new Block(ECGConstants.FORM, ECGConstants.UNTYPED); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(19/*form_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // form_block ::= FORM error 
            {
              Block RESULT = null;
		
    /* parser.report_error("form block has an error", null);*/ 
    RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(19/*form_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // form_block ::= FORM block_type constraint_list_opt 
            {
              Block RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = parser.grammar.new Block(ECGConstants.FORM, t);
    RESULT.setConstraints(c);
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(19/*form_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cxn_block ::= 
            {
              Block RESULT = null;
		 
    RESULT = parser.grammar.new Block(ECGConstants.CONSTRUCTIONAL, ECGConstants.UNTYPED);
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(18/*cxn_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cxn_block ::= CONSTRUCTIONAL error 
            {
              Block RESULT = null;
		 
    /*parser.report_error("constructional block has an error", null);*/ 
    RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(18/*cxn_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cxn_block ::= CONSTRUCTIONAL block_type evoked_list_opt constituents_list_opt constraint_list_opt 
            {
              Block RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> c1 = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c2 = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
    RESULT = parser.grammar.new Block(ECGConstants.CONSTRUCTIONAL, t);
    RESULT.setEvokedElements(e);
    RESULT.setElements(c1);
    RESULT.setConstraints(c2);
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(18/*cxn_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // block_type ::= 
            {
              String RESULT = null;
		 
    RESULT=ECGConstants.UNTYPED; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(22/*block_type*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // block_type ::= COLON typespec 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT= t; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(22/*block_type*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cxn ::= cxn_kind IDENTIFIER error 
            {
              Construction RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		 
    parser.structural_error("Construction "+n+" has an error"); 
    RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(16/*cxn*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cxn ::= cxn_kind IDENTIFIER parent_list_opt cxn_block form_block meaning_block 
            {
              Construction RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		HashSet<String> p = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		Block c = (Block)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Block f = (Block)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Block m = (Block)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
    if (c == null) {
      parser.structural_error("Construction "+n+" has an error in its constructional block");
    }

    if (f == null) {
      parser.structural_error("Construction "+n+" has an error in its form block");
    }

    if (m == null) {
      parser.structural_error("Construction "+n+" has an error in its meaning block");
    }
    
    RESULT = parser.grammar.new Construction(n, k, p, f, m, c); 
    //parser.grammar.getConstruction(n).setPackage(parser.grammar.getPackage()); 
    RESULT.setLocation(new Location(n, parser.file, nleft, nright));
    RESULT.setPackage(parser.grammar.getPackage()); // (seantrott)
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(16/*cxn*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cxn_kind ::= CONSTRUCTION 
            {
              String RESULT = null;
		 RESULT = ECGConstants.CONCRETE; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(21/*cxn_kind*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cxn_kind ::= ABSTRACT CONSTRUCTION 
            {
              String RESULT = null;
		 RESULT = ECGConstants.ABSTRACT; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(21/*cxn_kind*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ecg_list ::= error 
            {
              Grammar RESULT = null;
		 
    /* I'm hoping that the syntax error function covers this case. */ 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ecg_list ::= 
            {
              Grammar RESULT = null;
		 
    RESULT = parser.grammar; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ecg_list ::= ecg_list current_package 
            {
              Grammar RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar el = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
    if (c != null) {
      el.setPackage(c);
    }
    RESULT = el;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ecg_list ::= ecg_list current_import 
            {
              Grammar RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar el = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
    if (i != null) {
      el.addImport(i);
    }
    RESULT = el;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ecg_list ::= ecg_list situation 
            {
              Grammar RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar el = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Situation s = (Situation)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    if (s != null) { 
      el.addSituation(s); 
    } 
    RESULT = el; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ecg_list ::= ecg_list map 
            {
              Grammar RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar el = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		MapPrimitive m = (MapPrimitive)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    if (m != null) { 
      el.addMap(m); 
    } 
    RESULT = el; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ecg_list ::= ecg_list cxn 
            {
              Grammar RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar el = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Construction c = (Construction)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    if (c != null) {
        el.addConstruction(c);
    } 
    RESULT = el;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ecg_list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar start_val = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		RESULT = start_val;
              CUP$ECGReader$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ECGReader$parser.done_parsing();
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ecg_list ::= ecg_list schema 
            {
              Grammar RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar el = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Schema s = (Schema)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    if (s != null){el.addSchema(s);} 
    RESULT = el;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

