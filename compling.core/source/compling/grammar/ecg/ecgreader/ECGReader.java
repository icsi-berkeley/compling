
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Fri May 18 17:19:05 PDT 2012
//----------------------------------------------------

package compling.grammar.ecg.ecgreader;

import java.util.HashSet;
import java.util.LinkedHashSet;
import java_cup.runtime.Symbol;
import compling.grammar.ecg.ECGConstants;
import compling.grammar.ecg.Grammar;
import compling.grammar.ecg.Grammar.Block;
import compling.grammar.ecg.Grammar.Construction;
import compling.grammar.ecg.Grammar.ECGSlotChain;
import compling.grammar.ecg.Grammar.MapPrimitive;
import compling.grammar.ecg.Grammar.Schema;
import compling.grammar.ecg.Grammar.Situation;
import compling.grammar.unificationgrammar.UnificationGrammar.Constraint;
import compling.grammar.unificationgrammar.UnificationGrammar.Role;
import compling.grammar.unificationgrammar.UnificationGrammar.TypeConstraint;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Fri May 18 17:19:05 PDT 2012
  */
public class ECGReader extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ECGReader() {super();}

  /** Constructor which sets the default scanner. */
  public ECGReader(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\004\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\004\003\000\002\027\004\000\002\027\003\000" +
    "\002\022\010\000\002\022\005\000\002\030\004\000\002" +
    "\030\002\000\002\024\007\000\002\024\004\000\002\024" +
    "\002\000\002\025\005\000\002\025\004\000\002\025\002" +
    "\000\002\026\007\000\002\026\004\000\002\026\002\000" +
    "\002\031\004\000\002\031\004\000\002\031\003\000\002" +
    "\023\010\000\002\023\005\000\002\043\004\000\002\043" +
    "\003\000\002\042\010\000\002\042\005\000\002\045\004" +
    "\000\002\045\003\000\002\044\010\000\002\044\005\000" +
    "\002\005\003\000\002\005\002\000\002\003\003\000\002" +
    "\003\004\000\002\006\005\000\002\006\004\000\002\033" +
    "\003\000\002\033\003\000\002\007\006\000\002\013\004" +
    "\000\002\013\002\000\002\010\004\000\002\037\004\000" +
    "\002\037\002\000\002\014\003\000\002\014\002\000\002" +
    "\016\004\000\002\016\003\000\002\011\007\000\002\011" +
    "\007\000\002\011\006\000\002\034\005\000\002\034\002" +
    "\000\002\041\003\000\002\041\005\000\002\041\007\000" +
    "\002\015\003\000\002\015\002\000\002\017\004\000\002" +
    "\017\003\000\002\021\003\000\002\021\002\000\002\020" +
    "\005\000\002\020\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\040\003\000\002\040\002\000" +
    "\002\036\003\000\002\036\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\035\003\000\002\035" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\024\002\ufffc\003\004\004\ufffc\007\ufffc\010" +
    "\ufffc\033\ufffc\034\ufffc\036\ufffc\037\ufffc\001\002\000\022" +
    "\002\ufffb\004\ufffb\007\ufffb\010\ufffb\033\ufffb\034\ufffb\036" +
    "\ufffb\037\ufffb\001\002\000\022\002\017\004\016\007\012" +
    "\010\010\033\015\034\023\036\021\037\022\001\002\000" +
    "\004\040\177\001\002\000\022\002\ufffe\004\ufffe\007\ufffe" +
    "\010\ufffe\033\ufffe\034\ufffe\036\ufffe\037\ufffe\001\002\000" +
    "\010\004\176\036\174\037\175\001\002\000\004\040\113" +
    "\001\002\000\004\040\uffe9\001\002\000\022\002\001\004" +
    "\001\007\001\010\001\033\001\034\001\036\001\037\001" +
    "\001\002\000\022\002\ufffd\004\ufffd\007\ufffd\010\ufffd\033" +
    "\ufffd\034\ufffd\036\ufffd\037\ufffd\001\002\000\004\007\112" +
    "\001\002\000\004\040\ufff9\001\002\000\004\002\000\001" +
    "\002\000\004\040\104\001\002\000\004\040\uffe5\001\002" +
    "\000\004\040\uffe1\001\002\000\004\007\103\001\002\000" +
    "\004\040\026\001\002\000\022\002\uffff\004\uffff\007\uffff" +
    "\010\uffff\033\uffff\034\uffff\036\uffff\037\uffff\001\002\000" +
    "\034\002\uffdd\003\027\004\uffdd\005\031\007\uffdd\010\uffdd" +
    "\025\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\037" +
    "\uffdd\001\002\000\022\002\uffe7\004\uffe7\007\uffe7\010\uffe7" +
    "\033\uffe7\034\uffe7\036\uffe7\037\uffe7\001\002\000\030\002" +
    "\uffd4\004\uffd4\007\uffd4\010\uffd4\025\uffd4\030\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\036\uffd4\037\uffd4\001\002\000\006\027" +
    "\037\040\uffdc\001\002\000\004\040\036\001\002\000\040" +
    "\002\uffde\004\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012" +
    "\uffde\016\034\025\uffde\030\uffde\032\uffde\033\uffde\034\uffde" +
    "\036\uffde\037\uffde\001\002\000\004\040\035\001\002\000" +
    "\040\002\uffda\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\016\uffda\025\uffda\030\uffda\032\uffda\033\uffda\034" +
    "\uffda\036\uffda\037\uffda\001\002\000\040\002\uffd9\004\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\016\uffd9\025" +
    "\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9" +
    "\001\002\000\004\040\uffdb\001\002\000\030\002\uffcf\004" +
    "\uffcf\007\uffcf\010\uffcf\025\045\030\044\032\uffcf\033\uffcf" +
    "\034\uffcf\036\uffcf\037\uffcf\001\002\000\026\002\uffd0\004" +
    "\uffd0\007\uffd0\010\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0" +
    "\037\uffd0\040\076\001\002\000\036\002\uffd5\004\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\025\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\036\uffd5\037\uffd5\001\002\000" +
    "\024\002\uffbf\004\uffbf\007\uffbf\010\uffbf\032\055\033\uffbf" +
    "\034\uffbf\036\uffbf\037\uffbf\001\002\000\026\002\uffcd\004" +
    "\uffcd\007\uffcd\010\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\001\002\000\006\040\050\042\046\001" +
    "\002\000\042\002\uffd7\004\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7\001\002\000\004" +
    "\026\051\001\002\000\042\002\uffd8\004\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\040\uffd8\001" +
    "\002\000\004\040\052\001\002\000\036\002\uffd6\004\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\025\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6\001\002" +
    "\000\022\002\uffe8\004\uffe8\007\uffe8\010\uffe8\033\uffe8\034" +
    "\uffe8\036\uffe8\037\uffe8\001\002\000\034\002\uffc0\004\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\012\uffc0\033\uffc0\034\uffc0\035" +
    "\057\036\uffc0\037\uffc0\040\uffb8\044\uffb8\001\002\000\034" +
    "\002\uffbd\004\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\044\uffbd" +
    "\001\002\000\006\040\061\044\060\001\002\000\006\040" +
    "\uffb9\044\uffb9\001\002\000\044\002\uffb6\004\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\023\uffb6\024" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\044\uffb6\001\002\000\044\002\uffb7\004\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\023\uffb7\024\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\044" +
    "\uffb7\001\002\000\012\013\064\014\067\023\070\024\065" +
    "\001\002\000\034\002\uffbe\004\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\044\uffbe\001\002\000\006\040\uffbb\044\uffbb\001" +
    "\002\000\006\040\uffbc\044\uffbc\001\002\000\006\040\061" +
    "\044\060\001\002\000\006\040\uffba\044\uffba\001\002\000" +
    "\012\040\061\041\072\042\071\044\060\001\002\000\034" +
    "\002\uffb2\004\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\044\uffb2" +
    "\001\002\000\034\002\uffb1\004\uffb1\007\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\044\uffb1\001\002\000\034\002\uffb3\004\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\044\uffb3\001\002\000\034\002" +
    "\uffb4\004\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\044\uffb4\001" +
    "\002\000\034\002\uffb5\004\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\044\uffb5\001\002\000\030\002\uffd1\004\uffd1\007\uffd1" +
    "\010\uffd1\015\100\032\uffd1\033\uffd1\034\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\001\002\000\026\002\uffce\004\uffce\007\uffce" +
    "\010\uffce\032\uffce\033\uffce\034\uffce\036\uffce\037\uffce\040" +
    "\uffce\001\002\000\006\040\050\042\046\001\002\000\026" +
    "\002\uffd3\004\uffd3\007\uffd3\010\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\001\002\000\026\002\uffd2" +
    "\004\uffd2\007\uffd2\010\uffd2\032\uffd2\033\uffd2\034\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\001\002\000\004\040\uffea\001\002" +
    "\000\034\002\uffdd\003\105\004\uffdd\005\031\007\uffdd\010" +
    "\uffdd\025\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd" +
    "\037\uffdd\001\002\000\022\002\uffdf\004\uffdf\007\uffdf\010" +
    "\uffdf\033\uffdf\034\uffdf\036\uffdf\037\uffdf\001\002\000\030" +
    "\002\uffd4\004\uffd4\007\uffd4\010\uffd4\025\uffd4\030\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\036\uffd4\037\uffd4\001\002\000\030" +
    "\002\uffcf\004\uffcf\007\uffcf\010\uffcf\025\045\030\044\032" +
    "\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf\001\002\000\024" +
    "\002\uffbf\004\uffbf\007\uffbf\010\uffbf\032\055\033\uffbf\034" +
    "\uffbf\036\uffbf\037\uffbf\001\002\000\022\002\uffe0\004\uffe0" +
    "\007\uffe0\010\uffe0\033\uffe0\034\uffe0\036\uffe0\037\uffe0\001" +
    "\002\000\004\040\uffeb\001\002\000\034\002\uffdd\003\114" +
    "\004\uffdd\005\031\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd\001\002\000\022" +
    "\002\ufff7\004\ufff7\007\ufff7\010\ufff7\033\ufff7\034\ufff7\036" +
    "\ufff7\037\ufff7\001\002\000\030\002\ufff2\004\ufff2\006\117" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\033\ufff2\034\ufff2\036" +
    "\ufff2\037\ufff2\001\002\000\026\002\uffef\004\uffef\007\uffef" +
    "\010\uffef\011\160\012\uffef\033\uffef\034\uffef\036\uffef\037" +
    "\uffef\001\002\000\040\002\ufff5\003\120\004\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\015\121\025\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\036\ufff5\037\ufff5\001\002\000\026" +
    "\002\ufff3\004\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\033" +
    "\ufff3\034\ufff3\036\ufff3\037\ufff3\001\002\000\006\040\050" +
    "\042\046\001\002\000\034\002\uffd4\004\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\025\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\036\uffd4\037\uffd4\001\002\000\034\002\uffc3\004" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\025\045\031\125" +
    "\032\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\001\002\000" +
    "\036\002\uffc4\004\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\021\130\022\131\032\uffc4\033\uffc4\034\uffc4\036\uffc4\037" +
    "\uffc4\040\132\001\002\000\036\002\uffc1\004\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\021\uffc1\022\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1\001\002\000\030" +
    "\002\uffbf\004\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\032" +
    "\055\033\uffbf\034\uffbf\036\uffbf\037\uffbf\001\002\000\026" +
    "\002\ufff4\004\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\033" +
    "\ufff4\034\ufff4\036\ufff4\037\ufff4\001\002\000\004\040\153" +
    "\001\002\000\004\040\147\001\002\000\004\015\134\001" +
    "\002\000\036\002\uffc2\004\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\021\uffc2\022\uffc2\032\uffc2\033\uffc2\034\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\001\002\000\004\040\135\001\002" +
    "\000\040\002\uffc8\004\uffc8\007\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\017\136\021\uffc8\022\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\001\002\000\004\043\141\001" +
    "\002\000\036\002\uffca\004\uffca\007\uffca\010\uffca\011\uffca" +
    "\012\uffca\021\uffca\022\uffca\032\uffca\033\uffca\034\uffca\036" +
    "\uffca\037\uffca\040\uffca\001\002\000\004\020\146\001\002" +
    "\000\006\016\142\020\uffc7\001\002\000\004\043\143\001" +
    "\002\000\006\016\144\020\uffc6\001\002\000\004\043\145" +
    "\001\002\000\004\020\uffc5\001\002\000\036\002\uffc9\004" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\021\uffc9\022\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9\001" +
    "\002\000\004\015\150\001\002\000\004\040\151\001\002" +
    "\000\040\002\uffc8\004\uffc8\007\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\017\136\021\uffc8\022\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\001\002\000\036\002\uffcb\004" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\021\uffcb\022\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\040\uffcb\001" +
    "\002\000\004\015\154\001\002\000\004\040\155\001\002" +
    "\000\040\002\uffc8\004\uffc8\007\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\017\136\021\uffc8\022\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\001\002\000\036\002\uffcc\004" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\021\uffcc\022\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\036\uffcc\037\uffcc\040\uffcc\001" +
    "\002\000\036\002\ufff6\004\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\025\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\036\ufff6\037\ufff6\001\002\000\032\002\ufff5\003\171" +
    "\004\ufff5\007\ufff5\010\ufff5\012\ufff5\015\121\032\ufff5\033" +
    "\ufff5\034\ufff5\036\ufff5\037\ufff5\001\002\000\024\002\uffec" +
    "\004\uffec\007\uffec\010\uffec\012\163\033\uffec\034\uffec\036" +
    "\uffec\037\uffec\001\002\000\022\002\ufff8\004\ufff8\007\ufff8" +
    "\010\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8\001\002\000" +
    "\034\002\ufff5\003\164\004\ufff5\007\ufff5\010\ufff5\015\121" +
    "\025\ufff5\030\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\037" +
    "\ufff5\001\002\000\022\002\uffed\004\uffed\007\uffed\010\uffed" +
    "\033\uffed\034\uffed\036\uffed\037\uffed\001\002\000\030\002" +
    "\uffd4\004\uffd4\007\uffd4\010\uffd4\025\uffd4\030\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\036\uffd4\037\uffd4\001\002\000\030\002" +
    "\uffcf\004\uffcf\007\uffcf\010\uffcf\025\045\030\044\032\uffcf" +
    "\033\uffcf\034\uffcf\036\uffcf\037\uffcf\001\002\000\024\002" +
    "\uffbf\004\uffbf\007\uffbf\010\uffbf\032\055\033\uffbf\034\uffbf" +
    "\036\uffbf\037\uffbf\001\002\000\022\002\uffee\004\uffee\007" +
    "\uffee\010\uffee\033\uffee\034\uffee\036\uffee\037\uffee\001\002" +
    "\000\024\002\ufff0\004\ufff0\007\ufff0\010\ufff0\012\ufff0\033" +
    "\ufff0\034\ufff0\036\ufff0\037\ufff0\001\002\000\026\002\uffbf" +
    "\004\uffbf\007\uffbf\010\uffbf\012\uffbf\032\055\033\uffbf\034" +
    "\uffbf\036\uffbf\037\uffbf\001\002\000\024\002\ufff1\004\ufff1" +
    "\007\ufff1\010\ufff1\012\ufff1\033\ufff1\034\ufff1\036\ufff1\037" +
    "\ufff1\001\002\000\004\040\uffe6\001\002\000\004\040\uffe2" +
    "\001\002\000\004\040\ufffa\001\002\000\034\002\uffdd\003" +
    "\200\004\uffdd\005\031\007\uffdd\010\uffdd\025\uffdd\030\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd\001\002\000" +
    "\022\002\uffe3\004\uffe3\007\uffe3\010\uffe3\033\uffe3\034\uffe3" +
    "\036\uffe3\037\uffe3\001\002\000\030\002\uffd4\004\uffd4\007" +
    "\uffd4\010\uffd4\025\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\036\uffd4\037\uffd4\001\002\000\030\002\uffcf\004\uffcf\007" +
    "\uffcf\010\uffcf\025\045\030\044\032\uffcf\033\uffcf\034\uffcf" +
    "\036\uffcf\037\uffcf\001\002\000\024\002\uffbf\004\uffbf\007" +
    "\uffbf\010\uffbf\032\055\033\uffbf\034\uffbf\036\uffbf\037\uffbf" +
    "\001\002\000\022\002\uffe4\004\uffe4\007\uffe4\010\uffe4\033" +
    "\uffe4\034\uffe4\036\uffe4\037\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\004\004\001\001\000\002\001\001\000" +
    "\022\022\024\023\012\027\010\031\023\042\006\043\005" +
    "\044\013\045\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\031\005\027\006\032" +
    "\001\001\000\002\001\001\000\004\013\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\041\014\042\016\040\001\001\000\004" +
    "\010\076\001\001\000\002\001\001\000\006\020\053\021" +
    "\052\001\001\000\002\001\001\000\004\033\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\055\001\001\000\002\001\001\000\006\012\062\036" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\074\001\001" +
    "\000\002\001\001\000\006\035\073\036\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\100\001\001\000" +
    "\002\001\001\000\004\033\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\031\005" +
    "\105\006\032\001\001\000\002\001\001\000\004\013\106" +
    "\001\001\000\010\007\041\014\107\016\040\001\001\000" +
    "\006\020\053\021\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\031\005\114\006\032\001\001\000" +
    "\002\001\001\000\004\024\115\001\001\000\004\025\160" +
    "\001\001\000\004\030\121\001\001\000\002\001\001\000" +
    "\004\033\156\001\001\000\004\013\122\001\001\000\010" +
    "\007\041\015\125\017\123\001\001\000\004\011\132\001" +
    "\001\000\002\001\001\000\006\020\053\021\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\136\001\001\000\004\041\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\171\001\001\000\004\026" +
    "\161\001\001\000\002\001\001\000\004\030\164\001\001" +
    "\000\002\001\001\000\004\013\165\001\001\000\010\007" +
    "\041\014\166\016\040\001\001\000\006\020\053\021\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\053\021\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\031\005" +
    "\200\006\032\001\001\000\002\001\001\000\004\013\201" +
    "\001\001\000\010\007\041\014\202\016\040\001\001\000" +
    "\006\020\053\021\203\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ECGReader$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ECGReader$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ECGReader$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public Grammar grammar = new Grammar();
  public String file = "unknown";
  public StringBuffer errorLog = new StringBuffer();
  
  public String getErrorLog() { return errorLog.toString(); }
  
  public void setGrammar(Grammar g) { grammar = g; }
  
  public Grammar getGrammar() { return grammar; }
  
  //public Location getLocation() { return ((Yylex) getScanner()).getLocation(); }
  
  public int getLineNumber() { return ((Yylex) getScanner()).getLineNumber(); }
  
  @Override 
  public void syntax_error(Symbol cur_token) {
    errorLog.append("\nIn file " +file+",\t"); 
    String yyt = ((Yylex) getScanner()).yytext().trim();
    if (! yyt.equalsIgnoreCase("construction") && ! yyt.equalsIgnoreCase("schema")) {
        errorLog.append("Syntax error at line number "+((Yylex) getScanner()).getLineNumber()); 
        errorLog.append(";   Text of error: "+yyt+"\n");
    } else {
      errorLog.append("Syntax error before line number "+((Yylex) getScanner()).getLineNumber()); 
      errorLog.append("\n");  
    }
  } 
  
  public void structural_error(String message){
    errorLog.append("\t( "+message+" )\n");
  } 


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ECGReader$actions {
  private final ECGReader parser;

  /** Constructor */
  CUP$ECGReader$actions(ECGReader parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ECGReader$do_action(
    int                        CUP$ECGReader$act_num,
    java_cup.runtime.lr_parser CUP$ECGReader$parser,
    java.util.Stack            CUP$ECGReader$stack,
    int                        CUP$ECGReader$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ECGReader$result;

      /* select the action based on the action number */
      switch (CUP$ECGReader$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ident_or_str ::= STR 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = s; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(27/*ident_or_str*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ident_or_str ::= EXTERNALTYPE 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = i; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(27/*ident_or_str*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // constraint ::= slot_chain ASSIGN slot_chain 
            {
              Constraint RESULT = null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String arg2 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    if (arg2.indexOf(".") == -1)
      RESULT = new Constraint(ECGConstants.ASSIGN, new ECGSlotChain(arg1), arg2);
    else
      RESULT = new Constraint(ECGConstants.ASSIGN, new ECGSlotChain(arg1), new ECGSlotChain(arg2)); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(8/*constraint*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // constraint ::= slot_chain ASSIGN ident_or_str 
            {
              Constraint RESULT = null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String arg2 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = new Constraint(ECGConstants.ASSIGN, new ECGSlotChain(arg1), arg2); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(8/*constraint*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // constraint ::= slot_chain not_assign_operator slot_chain 
            {
              Constraint RESULT = null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String arg2 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = new Constraint(op, new ECGSlotChain(arg1), new ECGSlotChain(arg2)); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(8/*constraint*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // slot_chain ::= SLOTCHAIN 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = i; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(28/*slot_chain*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // slot_chain ::= IDENTIFIER 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = i; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(28/*slot_chain*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // opt_ignore ::= 
            {
              Boolean RESULT = null;
		 RESULT=false; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(30/*opt_ignore*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // opt_ignore ::= IGNORE 
            {
              Boolean RESULT = null;
		 RESULT= true; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(30/*opt_ignore*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // not_assign_operator ::= MEETS 
            {
              String RESULT = null;
		 RESULT=ECGConstants.MEETS; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(24/*not_assign_operator*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // not_assign_operator ::= BEFORE 
            {
              String RESULT = null;
		 RESULT=ECGConstants.BEFORE; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(24/*not_assign_operator*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // not_assign_operator ::= IDENTIFY 
            {
              String RESULT = null;
		 RESULT=ECGConstants.IDENTIFY; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(24/*not_assign_operator*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // constraint_list ::= CONSTRAINTS 
            {
              LinkedHashSet<Constraint> RESULT = null;
		 
    RESULT = new LinkedHashSet<Constraint>(); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(14/*constraint_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // constraint_list ::= constraint_list opt_ignore constraint 
            {
              LinkedHashSet<Constraint> RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Constraint> cl = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Constraint c = (Constraint)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    c.setOverridden(i); cl.add(c); RESULT = cl; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(14/*constraint_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // constraint_list_opt ::= 
            {
              LinkedHashSet<Constraint> RESULT = null;
		 
    RESULT = new LinkedHashSet<Constraint>(); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(15/*constraint_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // constraint_list_opt ::= constraint_list 
            {
              LinkedHashSet<Constraint> RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> cl = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = cl; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(15/*constraint_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // constituents_list ::= CONSTITUENTS 
            {
              LinkedHashSet<Role> RESULT = null;
		 
    RESULT = new LinkedHashSet<Role>(); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(13/*constituents_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // constituents_list ::= constituents_list constituent 
            {
              LinkedHashSet<Role> RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> cl = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Role c = (Role)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    cl.add(c); 
    RESULT = cl; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(13/*constituents_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // constituents_list_opt ::= 
            {
              LinkedHashSet<Role> RESULT = null;
		 RESULT = new LinkedHashSet<Role>(); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(11/*constituents_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // constituents_list_opt ::= constituents_list 
            {
              LinkedHashSet<Role> RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Role> cl = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = cl; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(11/*constituents_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // prob_list ::= PROB COMMA PROB COMMA PROB 
            {
              StringBuffer RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = new StringBuffer(p1); 
    RESULT.append(" "); 
    RESULT.append(p2); 
    RESULT.append(" "); 
    RESULT.append(p3); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(31/*prob_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // prob_list ::= PROB COMMA PROB 
            {
              StringBuffer RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = new StringBuffer(p1); 
    RESULT.append(" "); 
    RESULT.append(p2); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(31/*prob_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // prob_list ::= PROB 
            {
              StringBuffer RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = new StringBuffer(p); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(31/*prob_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // opt_constituent_annotation ::= 
            {
              String RESULT = null;
		 
    RESULT = ""; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(26/*opt_constituent_annotation*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // opt_constituent_annotation ::= OPENBRACKET prob_list CLOSEBRACKET 
            {
              String RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		StringBuffer pl = (StringBuffer)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		 
    pl.insert(0, " [ ").append(" ] "); 
    RESULT= pl.toString(); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(26/*opt_constituent_annotation*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // constituent ::= IDENTIFIER COLON IDENTIFIER opt_constituent_annotation 
            {
              Role RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT= new Role(i); 
    RESULT.setTypeConstraint(new TypeConstraint(t, null)); 
    RESULT.setSpecialField(a); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(7/*constituent*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // constituent ::= EXTRAPOSED IDENTIFIER COLON IDENTIFIER opt_constituent_annotation 
            {
              Role RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT= new Role(i); 
    RESULT.setTypeConstraint(new TypeConstraint(t, null)); 
    RESULT.setSpecialField(ECGConstants.EXTRAPOSED+a); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(7/*constituent*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constituent ::= OPTIONAL IDENTIFIER COLON IDENTIFIER opt_constituent_annotation 
            {
              Role RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT= new Role(i); 
    RESULT.setTypeConstraint(new TypeConstraint(t, null)); 
    RESULT.setSpecialField(ECGConstants.OPTIONAL+a); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(7/*constituent*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // roles_list ::= ROLES 
            {
              LinkedHashSet<Role> RESULT = null;
		 
    RESULT = new LinkedHashSet<Role>(); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(12/*roles_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // roles_list ::= roles_list role 
            {
              LinkedHashSet<Role> RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> rl = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Role r = (Role)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    rl.add(r); RESULT = rl; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(12/*roles_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // roles_list_opt ::= 
            {
              LinkedHashSet<Role> RESULT = null;
		 RESULT = new LinkedHashSet<Role>(); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(10/*roles_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // roles_list_opt ::= roles_list 
            {
              LinkedHashSet<Role> RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Role> cl = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = cl; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(10/*roles_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opt_type ::= 
            {
              TypeConstraint RESULT = null;
		 RESULT = null; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(29/*opt_type*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opt_type ::= COLON typespec 
            {
              TypeConstraint RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = new TypeConstraint(t, null); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(29/*opt_type*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // role ::= IDENTIFIER opt_type 
            {
              Role RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		TypeConstraint t = (TypeConstraint)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT= new Role(i); 
    if (t != null) { 
      RESULT.setTypeConstraint(t);
    } 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(6/*role*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // evoked_list_opt ::= 
            {
              LinkedHashSet<Role> RESULT = null;
		 RESULT = new LinkedHashSet<Role>(); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(9/*evoked_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // evoked_list_opt ::= evoked_list_opt evoked_element 
            {
              LinkedHashSet<Role> RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Role ee = (Role)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		  
    e.add(ee); 
    RESULT = e; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(9/*evoked_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // evoked_element ::= EVOKES typespec AS IDENTIFIER 
            {
              Role RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT=new Role(n); 
    RESULT.setTypeConstraint(new TypeConstraint(t, null)); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(5/*evoked_element*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // typespec ::= EXTERNALTYPE 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = t; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(25/*typespec*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // typespec ::= IDENTIFIER 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT=t; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(25/*typespec*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parent_list ::= subcase_of_keyword IDENTIFIER 
            {
              HashSet<String> RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = new HashSet<String>(); 
    RESULT.add(i); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(4/*parent_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parent_list ::= parent_list COMMA IDENTIFIER 
            {
              HashSet<String> RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		HashSet<String> pl = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    pl.add(i); 
    RESULT = pl;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(4/*parent_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subcase_of_keyword ::= SUBCASE OF 
            {
              Object RESULT = null;

              CUP$ECGReader$result = new java_cup.runtime.Symbol(1/*subcase_of_keyword*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // subcase_of_keyword ::= SUBCASE 
            {
              Object RESULT = null;

              CUP$ECGReader$result = new java_cup.runtime.Symbol(1/*subcase_of_keyword*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parent_list_opt ::= 
            {
              HashSet<String> RESULT = null;
		 RESULT = new HashSet<String>(); 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(3/*parent_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parent_list_opt ::= parent_list 
            {
              HashSet<String> RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		HashSet<String> pl = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 RESULT = pl; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(3/*parent_list_opt*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // situation ::= situation_kinds IDENTIFIER error 
            {
              Situation RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		 
     parser.report_error("map " + n + " has an error", null); 
     RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(34/*situation*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // situation ::= situation_kinds IDENTIFIER parent_list_opt evoked_list_opt roles_list_opt constraint_list_opt 
            {
              Situation RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		HashSet<String> p = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> r = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
    Block block = parser.grammar.new Block(ECGConstants.CONTENTS, n);
    block.setEvokedElements(e);
    block.setElements(r);
    block.setConstraints(c);
    RESULT = parser.grammar.new Situation(n, k, p, block); 
    RESULT.setLocation(new Location(n, parser.file, nleft, nright));
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(34/*situation*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // situation_kinds ::= SITUATION 
            {
              String RESULT = null;
		
    RESULT = ECGConstants.CONCRETE;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(35/*situation_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // situation_kinds ::= ABSTRACT SITUATION 
            {
              String RESULT = null;
		
    RESULT = ECGConstants.ABSTRACT;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(35/*situation_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // map ::= map_kinds IDENTIFIER error 
            {
              MapPrimitive RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		 
     parser.report_error("map " + n + " has an error", null); 
     RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(32/*map*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // map ::= map_kinds IDENTIFIER parent_list_opt evoked_list_opt roles_list_opt constraint_list_opt 
            {
              MapPrimitive RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		HashSet<String> p = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> r = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
    Block block = parser.grammar.new Block(ECGConstants.CONTENTS, n);
    block.setEvokedElements(e);
    block.setElements(r);
    block.setConstraints(c);
    RESULT = parser.grammar.new MapPrimitive(n, k, p, block); 
    RESULT.setLocation(new Location(n, parser.file, nleft, nright));
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(32/*map*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // map_kinds ::= MAP 
            {
              String RESULT = null;
		
    RESULT = ECGConstants.CONCRETE;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(33/*map_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // map_kinds ::= ABSTRACT MAP 
            {
              String RESULT = null;
		
    RESULT = ECGConstants.ABSTRACT;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(33/*map_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // schema ::= schema_kinds IDENTIFIER error 
            {
              Schema RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		 
     parser.report_error("schema " + n + " has an error", null); 
     RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(17/*schema*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // schema ::= schema_kinds IDENTIFIER parent_list_opt evoked_list_opt roles_list_opt constraint_list_opt 
            {
              Schema RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		HashSet<String> p = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> r = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    Block block = parser.grammar.new Block(ECGConstants.CONTENTS, n);
    block.setEvokedElements(e);
    block.setElements(r);
    block.setConstraints(c);
    RESULT = parser.grammar.new Schema(n, k, p, block); 
    RESULT.setLocation(new Location(n, parser.file, nleft, nright));
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(17/*schema*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // schema_kinds ::= SCHEMA 
            {
              String RESULT = null;
		 RESULT=ECGConstants.SEMANTIC; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(23/*schema_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // schema_kinds ::= SEMANTIC SCHEMA 
            {
              String RESULT = null;
		 RESULT=ECGConstants.SEMANTIC; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(23/*schema_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // schema_kinds ::= FEATURE SCHEMA 
            {
              String RESULT = null;
		 RESULT= ECGConstants.FEATURE; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(23/*schema_kinds*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // meaning_block ::= 
            {
              Block RESULT = null;
		 
    RESULT = parser.grammar.new Block(ECGConstants.MEANING, ECGConstants.UNTYPED);
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(20/*meaning_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // meaning_block ::= MEANING error 
            {
              Block RESULT = null;
		 
    /* parser.report_error("meaning block has an error", null);*/  
    RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(20/*meaning_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // meaning_block ::= MEANING block_type evoked_list_opt roles_list_opt constraint_list_opt 
            {
              Block RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> r = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = parser.grammar.new Block(ECGConstants.MEANING, t);
    RESULT.setEvokedElements(e);
    RESULT.setElements(r);
    RESULT.setConstraints(c);
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(20/*meaning_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // form_block ::= 
            {
              Block RESULT = null;
		 
    RESULT = parser.grammar.new Block(ECGConstants.FORM, ECGConstants.UNTYPED); 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(19/*form_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // form_block ::= FORM error 
            {
              Block RESULT = null;
		
    /* parser.report_error("form block has an error", null);*/ 
    RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(19/*form_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // form_block ::= FORM block_type constraint_list_opt 
            {
              Block RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT = parser.grammar.new Block(ECGConstants.FORM, t);
    RESULT.setConstraints(c);
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(19/*form_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cxn_block ::= 
            {
              Block RESULT = null;
		 
    RESULT = parser.grammar.new Block(ECGConstants.CONSTRUCTIONAL, ECGConstants.UNTYPED);
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(18/*cxn_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cxn_block ::= CONSTRUCTIONAL error 
            {
              Block RESULT = null;
		 
    /*parser.report_error("constructional block has an error", null);*/ 
    RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(18/*cxn_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cxn_block ::= CONSTRUCTIONAL block_type evoked_list_opt constituents_list_opt constraint_list_opt 
            {
              Block RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		LinkedHashSet<Role> e = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		LinkedHashSet<Role> c1 = (LinkedHashSet<Role>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		LinkedHashSet<Constraint> c2 = (LinkedHashSet<Constraint>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
    RESULT = parser.grammar.new Block(ECGConstants.CONSTRUCTIONAL, t);
    RESULT.setEvokedElements(e);
    RESULT.setElements(c1);
    RESULT.setConstraints(c2);
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(18/*cxn_block*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // block_type ::= 
            {
              String RESULT = null;
		 
    RESULT=ECGConstants.UNTYPED; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(22/*block_type*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block_type ::= COLON typespec 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    RESULT= t; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(22/*block_type*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cxn ::= cxn_kind IDENTIFIER error 
            {
              Construction RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		 
    parser.structural_error("Construction "+n+" has an error"); 
    RESULT = null; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(16/*cxn*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cxn ::= cxn_kind IDENTIFIER parent_list_opt cxn_block form_block meaning_block 
            {
              Construction RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).right;
		HashSet<String> p = (HashSet<String>)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).right;
		Block c = (Block)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Block f = (Block)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Block m = (Block)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		
    if (c == null) {
      parser.structural_error("Construction "+n+" has an error in its constructional block");
    }

    if (f == null) {
      parser.structural_error("Construction "+n+" has an error in its form block");
    }

    if (m == null) {
      parser.structural_error("Construction "+n+" has an error in its meaning block");
    }
    
    RESULT = parser.grammar.new Construction(n, k, p, f, m, c); 
    RESULT.setLocation(new Location(n, parser.file, nleft, nright));
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(16/*cxn*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cxn_kind ::= CONSTRUCTION 
            {
              String RESULT = null;
		 RESULT = ECGConstants.CONCRETE; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(21/*cxn_kind*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cxn_kind ::= ABSTRACT CONSTRUCTION 
            {
              String RESULT = null;
		 RESULT = ECGConstants.ABSTRACT; 
              CUP$ECGReader$result = new java_cup.runtime.Symbol(21/*cxn_kind*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ecg_list ::= error 
            {
              Grammar RESULT = null;
		 
    /* I'm hoping that the syntax error function covers this case. */ 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ecg_list ::= 
            {
              Grammar RESULT = null;
		 
    RESULT = parser.grammar; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ecg_list ::= ecg_list situation 
            {
              Grammar RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar el = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Situation s = (Situation)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    if (s != null) { 
      el.addSituation(s); 
    } 
    RESULT = el; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ecg_list ::= ecg_list map 
            {
              Grammar RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar el = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		MapPrimitive m = (MapPrimitive)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    if (m != null) { 
      el.addMap(m); 
    } 
    RESULT = el; 
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ecg_list ::= ecg_list cxn 
            {
              Grammar RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar el = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Construction c = (Construction)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    if (c != null) {
        el.addConstruction(c);
    } 
    RESULT = el;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ecg_list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar start_val = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		RESULT = start_val;
              CUP$ECGReader$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ECGReader$parser.done_parsing();
          return CUP$ECGReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ecg_list ::= ecg_list schema 
            {
              Grammar RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).right;
		Grammar el = (Grammar)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right;
		Schema s = (Schema)((java_cup.runtime.Symbol) CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).value;
		 
    if (s != null){el.addSchema(s);} 
    RESULT = el;
  
              CUP$ECGReader$result = new java_cup.runtime.Symbol(2/*ecg_list*/, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$ECGReader$stack.elementAt(CUP$ECGReader$top-0)).right, RESULT);
            }
          return CUP$ECGReader$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

