
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Wed Mar 25 11:22:14 PDT 2015
//----------------------------------------------------

package compling.context;

import java.util.ArrayList;
import java.util.List;
import compling.grammar.ecg.ECGConstants;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Wed Mar 25 11:22:14 PDT 2015
  */
public class MiniOntologyReader extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MiniOntologyReader() {super();}

  /** Constructor which sets the default scanner. */
  public MiniOntologyReader(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\016\006\000\002\002\004\000\002\017" +
    "\006\000\002\017\002\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\020\006\000\002" +
    "\020\002\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\011\007\000\002\024\004\000" +
    "\002\024\002\000\002\025\004\000\002\025\002\000\002" +
    "\026\007\000\002\026\010\000\002\026\010\000\002\026" +
    "\011\000\002\026\011\000\002\026\002\000\002\027\004" +
    "\000\002\027\002\000\002\030\007\000\002\030\002\000" +
    "\002\003\006\000\002\003\007\000\002\003\007\000\002" +
    "\003\010\000\002\003\010\000\002\004\006\000\002\004" +
    "\007\000\002\004\007\000\002\004\010\000\002\004\010" +
    "\000\002\035\003\000\002\036\004\000\002\037\003\000" +
    "\002\040\004\000\002\007\005\000\002\023\004\000\002" +
    "\023\002\000\002\010\006\000\002\005\005\000\002\006" +
    "\006\000\002\014\006\000\002\014\006\000\002\015\005" +
    "\000\002\033\010\000\002\033\006\000\002\033\005\000" +
    "\002\031\004\000\002\031\002\000\002\032\007\000\002" +
    "\032\002\000\002\034\003\000\002\034\005\000\002\034" +
    "\003\000\002\012\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\016\004\001\002\000\006\004\ufffe\017" +
    "\ufffe\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002\000\006\004\011\017\010\001\002\000\006\002" +
    "\ufff5\004\ufff5\001\002\000\024\006\027\007\025\010\016" +
    "\013\023\014\022\015\024\020\030\024\015\025\031\001" +
    "\002\000\004\005\ufffb\001\002\000\004\005\154\001\002" +
    "\000\004\005\ufff8\001\002\000\004\005\uffd4\001\002\000" +
    "\004\026\151\001\002\000\004\005\ufff7\001\002\000\004" +
    "\005\ufff9\001\002\000\004\005\ufffc\001\002\000\010\007" +
    "\130\010\131\015\132\001\002\000\004\026\125\001\002" +
    "\000\010\007\105\010\106\014\104\001\002\000\004\026" +
    "\101\001\002\000\004\005\ufffa\001\002\000\004\026\077" +
    "\001\002\000\004\026\033\001\002\000\004\005\uffd2\001" +
    "\002\000\004\005\ufffd\001\002\000\012\005\uffeb\006\034" +
    "\007\uffeb\013\uffeb\001\002\000\012\005\uffce\007\uffce\013" +
    "\uffce\026\uffce\001\002\000\010\005\uffe9\007\037\013\uffe9" +
    "\001\002\000\006\005\uffe1\013\065\001\002\000\010\004" +
    "\uffe3\005\uffe3\013\uffe3\001\002\000\010\004\041\005\uffea" +
    "\013\uffea\001\002\000\010\014\042\015\044\026\043\001" +
    "\002\000\006\015\057\026\056\001\002\000\004\026\054" +
    "\001\002\000\006\014\045\026\046\001\002\000\004\026" +
    "\051\001\002\000\004\026\047\001\002\000\004\005\050" +
    "\001\002\000\010\004\uffe6\005\uffe6\013\uffe6\001\002\000" +
    "\004\026\052\001\002\000\004\005\053\001\002\000\010" +
    "\004\uffe4\005\uffe4\013\uffe4\001\002\000\004\005\055\001" +
    "\002\000\010\004\uffe8\005\uffe8\013\uffe8\001\002\000\004" +
    "\026\063\001\002\000\004\026\060\001\002\000\004\026" +
    "\061\001\002\000\004\005\062\001\002\000\010\004\uffe5" +
    "\005\uffe5\013\uffe5\001\002\000\004\005\064\001\002\000" +
    "\010\004\uffe7\005\uffe7\013\uffe7\001\002\000\006\004\uffe3" +
    "\005\uffdf\001\002\000\004\005\uffed\001\002\000\004\004" +
    "\071\001\002\000\004\005\uffe2\001\002\000\010\014\042" +
    "\015\044\026\072\001\002\000\004\026\073\001\002\000" +
    "\004\005\074\001\002\000\006\004\uffe8\005\uffe0\001\002" +
    "\000\012\005\uffec\007\uffec\013\uffec\026\076\001\002\000" +
    "\012\005\uffcf\007\uffcf\013\uffcf\026\uffcf\001\002\000\006" +
    "\005\uffce\026\uffce\001\002\000\006\005\uffd0\026\076\001" +
    "\002\000\004\026\102\001\002\000\004\026\103\001\002" +
    "\000\004\005\uffd9\001\002\000\006\007\115\010\116\001" +
    "\002\000\004\026\112\001\002\000\004\026\107\001\002" +
    "\000\004\026\110\001\002\000\004\026\111\001\002\000" +
    "\004\005\uffdc\001\002\000\004\026\113\001\002\000\004" +
    "\026\114\001\002\000\004\005\uffd7\001\002\000\004\026" +
    "\122\001\002\000\004\026\117\001\002\000\004\026\120" +
    "\001\002\000\004\026\121\001\002\000\004\005\uffdb\001" +
    "\002\000\004\026\123\001\002\000\004\026\124\001\002" +
    "\000\004\005\uffd6\001\002\000\004\026\126\001\002\000" +
    "\004\026\127\001\002\000\004\005\uffcd\001\002\000\004" +
    "\026\146\001\002\000\004\026\143\001\002\000\006\007" +
    "\133\010\134\001\002\000\004\026\140\001\002\000\004" +
    "\026\135\001\002\000\004\026\136\001\002\000\004\026" +
    "\137\001\002\000\004\005\uffda\001\002\000\004\026\141" +
    "\001\002\000\004\026\142\001\002\000\004\005\uffd5\001" +
    "\002\000\004\026\144\001\002\000\004\026\145\001\002" +
    "\000\004\005\uffdd\001\002\000\004\026\147\001\002\000" +
    "\004\026\150\001\002\000\004\005\uffd8\001\002\000\004" +
    "\026\152\001\002\000\004\026\153\001\002\000\004\005" +
    "\uffde\001\002\000\006\004\uffff\017\uffff\001\002\000\006" +
    "\002\001\004\156\001\002\000\014\011\167\012\163\021" +
    "\161\022\165\023\162\001\002\000\004\005\ufff0\001\002" +
    "\000\004\005\ufff2\001\002\000\004\026\214\001\002\000" +
    "\004\026\210\001\002\000\004\026\200\001\002\000\004" +
    "\005\ufff4\001\002\000\004\026\177\001\002\000\004\005" +
    "\uffef\001\002\000\004\026\175\001\002\000\004\005\ufff3" +
    "\001\002\000\004\005\uffee\001\002\000\004\005\174\001" +
    "\002\000\004\005\ufff1\001\002\000\006\002\ufff6\004\ufff6" +
    "\001\002\000\004\026\176\001\002\000\004\005\uffcc\001" +
    "\002\000\004\005\uffbd\001\002\000\004\026\201\001\002" +
    "\000\010\004\205\026\204\027\203\001\002\000\004\005" +
    "\uffcb\001\002\000\004\005\uffbe\001\002\000\004\005\uffc0" +
    "\001\002\000\004\021\161\001\002\000\004\005\207\001" +
    "\002\000\004\005\uffbf\001\002\000\004\026\211\001\002" +
    "\000\010\005\uffc8\026\212\027\213\001\002\000\004\005" +
    "\uffca\001\002\000\004\005\uffc9\001\002\000\010\005\uffc3" +
    "\012\217\026\216\001\002\000\004\005\uffc5\001\002\000" +
    "\010\005\uffc3\012\217\026\225\001\002\000\006\004\uffc1" +
    "\005\uffc1\001\002\000\006\004\221\005\uffc4\001\002\000" +
    "\004\026\222\001\002\000\010\004\205\026\204\027\203" +
    "\001\002\000\004\005\224\001\002\000\006\004\uffc2\005" +
    "\uffc2\001\002\000\004\026\227\001\002\000\004\005\uffc6" +
    "\001\002\000\006\005\uffc3\012\217\001\002\000\004\005" +
    "\uffc7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\016\004\001\001\000\004\017\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\154\001\001\000\022\003\031\004\020\007" +
    "\011\010\025\011\017\021\012\035\013\037\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\034\001\001\000\004\023\074" +
    "\001\001\000\004\025\035\001\001\000\004\027\065\001" +
    "\001\000\004\026\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\066\030\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\163\006\167\012\156\013\172\014\165\015" +
    "\170\022\171\033\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\214\001\001\000\002\001\001\000\004\031\225\001\001" +
    "\000\004\032\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\227\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiniOntologyReader$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiniOntologyReader$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiniOntologyReader$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public MiniOntology m = new MiniOntology(false);
	
	public String file="unknown";
	
	public MiniOntology  getMiniOntology() { return m; }	
	
	public void setMiniOntology(MiniOntology mo) { this.m = mo; }
	
	public void report_error(String message, Object info) {
	   super.report_error("In file "	 + file + ": " + message 
	       + " around line number " + ((Yylex) getScanner()).getLineNumber() 
	       + " near the line \""  + ((Yylex) getScanner()).getMatchedText() 
	       + "\"", null);
	}	
	
	public int counter = 0;
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MiniOntologyReader$actions {
  private final MiniOntologyReader parser;

  /** Constructor */
  CUP$MiniOntologyReader$actions(MiniOntologyReader parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MiniOntologyReader$do_action(
    int                        CUP$MiniOntologyReader$act_num,
    java_cup.runtime.lr_parser CUP$MiniOntologyReader$parser,
    java.util.Stack            CUP$MiniOntologyReader$stack,
    int                        CUP$MiniOntologyReader$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiniOntologyReader$result;

      /* select the action based on the action number */
      switch (CUP$MiniOntologyReader$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // update_interval_prim ::= CURRENTINTERVAL IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
  parser.m.setCurrentInterval(name); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(8/*update_interval_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // inst_name ::= STR 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 RESULT = s; 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(26/*inst_name*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // inst_name ::= OPENPAREN instance_prim CLOSEPAREN 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		 RESULT = i; 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(26/*inst_name*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // inst_name ::= IDENTIFIER 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 RESULT = i; 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(26/*inst_name*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fil_pair_list ::= 
            {
              List<String> RESULT = null;
		 RESULT = new ArrayList<String>(); 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(24/*fil_pair_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fil_pair_list ::= fil_pair_list OPENPAREN IDENTIFIER inst_name CLOSEPAREN 
            {
              List<String> RESULT = null;
		int rplleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left;
		int rplright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).right;
		List<String> rpl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).value;
		int relnameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int relnameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String relname = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int instnameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int instnameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String instname = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		 
    rpl.add(relname + ":" + instname); RESULT = rpl; 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(24/*fil_pair_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // opt_fil_list ::= 
            {
              List<String> RESULT = null;
		 RESULT = new ArrayList<String>(); 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(23/*opt_fil_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opt_fil_list ::= FIL fil_pair_list 
            {
              List<String> RESULT = null;
		int rplleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rplright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		List<String> rpl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 RESULT = rpl; 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(23/*opt_fil_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instance_prim ::= INST IDENTIFIER opt_fil_list 
            {
              String RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int oflleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int oflright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		List<String> ofl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		
		String name = type + parser.counter;
		parser.counter++;
		parser.m.addIndividual(name, type, parser.m.getPackage());
		for (String filpair : ofl) {
			String pair[] = filpair.split(":");
			parser.m.addRelationFiller(pair[0], name, pair[1]);
		}
		RESULT = name;
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(25/*instance_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instance_prim ::= INST IDENTIFIER IDENTIFIER opt_fil_list 
            {
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int oflleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int oflright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		List<String> ofl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		
		parser.m.addIndividual(name, type, parser.m.getPackage());
		for (String filpair : ofl){
			String pair[] = filpair.split(":");
			parser.m.addRelationFiller(pair[0], name, pair[1]);
		}
		RESULT = name;
	
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(25/*instance_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instance_prim ::= INST IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER opt_fil_list 
            {
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String parent = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int precedingleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int precedingright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String preceding = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int oflleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int oflright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		List<String> ofl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
  	parser.m.defineNewInterval(name, type, parent, preceding);
  	for (String filpair : ofl){
  		String pair[] = filpair.split(":");
  		parser.m.addRelationFiller(pair[0], name, pair[1]);
  	}
  	RESULT = name;
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(25/*instance_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rem_all_prim ::= REM IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int relnameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int relnameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String relname = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int holderleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int holderright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String holder = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
	 parser.m.removeAllRelationFillers(relname, holder); 
	
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(11/*rem_all_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rem_prim ::= REM IDENTIFIER IDENTIFIER STR 
            {
              Object RESULT = null;
		int relnameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int relnameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String relname = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int holderleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int holderright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String holder = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    parser.m.removeRelationFiller(relname, holder, value); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(10/*rem_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rem_prim ::= REM IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int relnameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int relnameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String relname = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int holderleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int holderright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String holder = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    parser.m.removeRelationFiller(relname, holder, value); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(10/*rem_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fil_prim ::= FIL IDENTIFIER IDENTIFIER inst_name 
            {
              Object RESULT = null;
		int relnameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int relnameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String relname = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int holderleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int holderright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String holder = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		
    parser.m.addRelationFiller(relname, holder, value); 
	
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(4/*fil_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ind_prim ::= IND IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
	   parser.m.addIndividual(name, cat, parser.m.getPackage()); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(3/*ind_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // eq_prim ::= EQ IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int catleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    parser.m.addCoindexation(cat, r1, r2); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(6/*eq_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parent_list ::= 
            {
              List<String> RESULT = null;
		 RESULT = new ArrayList<String>(); 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(17/*parent_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parent_list ::= parent_list IDENTIFIER 
            {
              List<String> RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		List<String> pl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    pl.add(p); 
    RESULT=pl; 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(17/*parent_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sub_prim ::= SUB IDENTIFIER parent_list 
            {
              Object RESULT = null;
		int new_typeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int new_typeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String new_type = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		List<String> pl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    parser.m.addType(new_type, pl); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(5/*sub_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // current_import ::= import_kind IDENTIFIER 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		
      RESULT = parser.m.addImport(n);
    
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(30/*current_import*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // import_kind ::= IMPORT 
            {
              String RESULT = null;
		
      RESULT = ECGConstants.IMPORT;
    
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(29/*import_kind*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // current_package ::= package_kinds IDENTIFIER 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		
     RESULT = parser.m.setPackage(n);
   
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(28/*current_package*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // package_kinds ::= PACKAGE 
            {
              String RESULT = null;
		
     RESULT = ECGConstants.PACKAGE;
   
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(27/*package_kinds*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rel_prim ::= PERSISTENT NONBLOCKING REL IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		
    parser.m.addFunction(name, domain, range, true, false); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(2/*rel_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rel_prim ::= NONBLOCKING PERSISTENT REL IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    parser.m.addFunction(name, domain, range, true, false); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(2/*rel_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rel_prim ::= NONBLOCKING REL IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		
    parser.m.addFunction(name, domain, range, false, false); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(2/*rel_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rel_prim ::= PERSISTENT REL IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    parser.m.addFunction(name, domain, range, true, true); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(2/*rel_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // rel_prim ::= REL IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    parser.m.addFunction(name, domain, range, false, true); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(2/*rel_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fun_prim ::= PERSISTENT NONBLOCKING FUN IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    parser.m.addFunction(name, domain, range, true, false); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(1/*fun_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fun_prim ::= NONBLOCKING PERSISTENT FUN IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    parser.m.addFunction(name, domain, range, true, false); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(1/*fun_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fun_prim ::= NONBLOCKING FUN IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    parser.m.addFunction(name, domain, range, false, false); 
	
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(1/*fun_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fun_prim ::= PERSISTENT FUN IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		
    parser.m.addFunction(name, domain, range, true, true); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(1/*fun_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fun_prim ::= FUN IDENTIFIER IDENTIFIER IDENTIFIER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 
    parser.m.addFunction(name, domain, range, false, true); 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(1/*fun_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // binding_pair_list ::= 
            {
              List<String> RESULT = null;
		 RESULT = new ArrayList<String>(); 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(22/*binding_pair_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // binding_pair_list ::= rel_pair_list OPENPAREN IDENTIFIER IDENTIFIER CLOSEPAREN 
            {
              List<String> RESULT = null;
		int rplleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left;
		int rplright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).right;
		List<String> rpl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).value;
		int name1left = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name1 = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String name2 = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		 
    rpl.add(name1+":"+name2); RESULT = rpl; 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(22/*binding_pair_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opt_bindings_list ::= 
            {
              List<String> RESULT = null;
		 RESULT = new ArrayList<String>(); 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(21/*opt_bindings_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opt_bindings_list ::= EQ binding_pair_list 
            {
              List<String> RESULT = null;
		int rplleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rplright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		List<String> rpl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 RESULT = rpl; 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(21/*opt_bindings_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel_pair_list ::= 
            {
              List<String> RESULT = null;
		 RESULT = new ArrayList<String>(); 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(20/*rel_pair_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rel_pair_list ::= rel_pair_list OPENPAREN NONBLOCKING PERSISTENT IDENTIFIER IDENTIFIER CLOSEPAREN 
            {
              List<String> RESULT = null;
		int rplleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-6)).left;
		int rplright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-6)).right;
		List<String> rpl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		
    rpl.add("$" + name + ":" + range); RESULT = rpl; 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(20/*rel_pair_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-6)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rel_pair_list ::= rel_pair_list OPENPAREN PERSISTENT NONBLOCKING IDENTIFIER IDENTIFIER CLOSEPAREN 
            {
              List<String> RESULT = null;
		int rplleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-6)).left;
		int rplright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-6)).right;
		List<String> rpl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		
    rpl.add("$" + name + ":" + range); RESULT = rpl; 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(20/*rel_pair_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-6)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // rel_pair_list ::= rel_pair_list OPENPAREN NONBLOCKING IDENTIFIER IDENTIFIER CLOSEPAREN 
            {
              List<String> RESULT = null;
		int rplleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).left;
		int rplright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).right;
		List<String> rpl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		
    rpl.add("%$" + name + ":" + range); RESULT = rpl;
	
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(20/*rel_pair_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rel_pair_list ::= rel_pair_list OPENPAREN PERSISTENT IDENTIFIER IDENTIFIER CLOSEPAREN 
            {
              List<String> RESULT = null;
		int rplleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).left;
		int rplright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).right;
		List<String> rpl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		
    rpl.add(name+":" + range); RESULT = rpl; 
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(20/*rel_pair_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-5)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rel_pair_list ::= rel_pair_list OPENPAREN IDENTIFIER IDENTIFIER CLOSEPAREN 
            {
              List<String> RESULT = null;
		int rplleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left;
		int rplright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).right;
		List<String> rpl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		
    rpl.add("%" + name + ":" + range); RESULT = rpl; 
	
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(20/*rel_pair_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opt_rels_list ::= 
            {
              List<String> RESULT = null;
		 RESULT = new ArrayList<String>(); 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(19/*opt_rels_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opt_rels_list ::= REL rel_pair_list 
            {
              List<String> RESULT = null;
		int rplleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int rplright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		List<String> rpl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 RESULT = rpl; 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(19/*opt_rels_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opt_parent_list ::= 
            {
              List<String> RESULT = null;
		 RESULT = new ArrayList<String>(); 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(18/*opt_parent_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opt_parent_list ::= SUB parent_list 
            {
              List<String> RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		List<String> pl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		 RESULT = pl; 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(18/*opt_parent_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_prim ::= TYPE IDENTIFIER opt_parent_list opt_rels_list opt_bindings_list 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).right;
		List<String> pl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		List<String> rl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right;
		List<String> bl = (List<String>)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).value;
		
		parser.m.addType(name, pl); 
		for (String relpair : rl) {
			String[] pair = relpair.split(":");
			boolean persistent = true;
			boolean blocking = true;
			if (pair[0].indexOf("%") != -1) { 
			     persistent = false; pair[0] = pair[0].substring(1); 
		    }
			if (pair[0].indexOf("$") != -1) { 
			     blocking = false; pair[0] = pair[0].substring(1); 
		    }
			parser.m.addRelation(pair[0], name, pair[1], persistent, blocking); 
		}	
		for (String eqpair : bl) {
			String[] pair = eqpair.split(":");
			if (pair[0].indexOf("%") != -1) { pair[0] = pair[0].substring(1); }
			if (pair[0].indexOf("$") != -1) { pair[0] = pair[0].substring(1); }		
			parser.m.addCoindexation(name, pair[0], pair[1]); 
		}	
  
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(7/*type_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-4)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inst_prim ::= rem_all_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(16/*inst_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inst_prim ::= rem_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(16/*inst_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inst_prim ::= update_interval_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(16/*inst_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inst_prim ::= interval_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(16/*inst_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inst_prim ::= instance_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(16/*inst_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inst_prim ::= fil_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(16/*inst_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inst_prim ::= ind_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(16/*inst_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // insts_list ::= 
            {
              Object RESULT = null;
		 parser.m.build(); 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(14/*insts_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // insts_list ::= insts_list OPENPAREN inst_prim CLOSEPAREN 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(14/*insts_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_prim ::= import_kind 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(15/*def_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // def_prim ::= package_kinds 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(15/*def_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // def_prim ::= type_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(15/*def_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // def_prim ::= eq_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(15/*def_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // def_prim ::= sub_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(15/*def_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def_prim ::= rel_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(15/*def_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def_prim ::= fun_prim 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(15/*def_prim*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // defs_list ::= 
            {
              Object RESULT = null;
		 parser.m.initRecentlyAccessedIndividuals(); 
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(13/*defs_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // defs_list ::= defs_list OPENPAREN def_prim CLOSEPAREN 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(13/*defs_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ont_list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).value;
		RESULT = start_val;
              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-1)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MiniOntologyReader$parser.done_parsing();
          return CUP$MiniOntologyReader$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ont_list ::= DEFS defs_list INSTS insts_list 
            {
              Object RESULT = null;

              CUP$MiniOntologyReader$result = new java_cup.runtime.Symbol(12/*ont_list*/, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-3)).left, ((java_cup.runtime.Symbol)CUP$MiniOntologyReader$stack.elementAt(CUP$MiniOntologyReader$top-0)).right, RESULT);
            }
          return CUP$MiniOntologyReader$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

