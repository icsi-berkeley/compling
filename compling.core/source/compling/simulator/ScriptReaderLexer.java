/* The following code was generated by JFlex 1.4.1 on 4/23/08 11:27 PM */

package compling.simulator;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a> 1.4.1 on 4/23/08 11:27 PM from the
 * specification file <tt>ScriptReader.flex</tt>
 */
public class ScriptReaderLexer implements java_cup.runtime.Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int commentstyle2 = 2;
	public static final int YYINITIAL = 0;
	public static final int commentstyle1 = 1;

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\10\0\1\1\1\45\1\4\1\0\2\44\22\0\1\45\1\26\1\3"
			+ "\5\0\1\34\1\35\1\6\2\0\1\42\1\0\1\5\12\41\1\0" + "\1\33\3\0\1\43\1\0\1\31\1\41\1\14\1\27\1\11\1\30"
			+ "\2\41\1\23\2\41\1\32\1\37\1\24\1\41\1\25\1\15\1\17" + "\1\22\1\21\1\16\1\36\1\41\1\12\1\20\1\41\1\0\1\2"
			+ "\2\0\1\40\1\0\1\31\1\41\1\14\1\27\1\11\1\30\2\41" + "\1\23\2\41\1\32\1\37\1\24\1\41\1\25\1\15\1\17\1\22"
			+ "\1\21\1\16\1\36\1\41\1\12\1\20\1\41\1\7\1\13\1\10" + "\uff82\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\2\0\1\1\2\2\1\1\1\2\1\3\1\4\2\5"
			+ "\1\2\5\5\1\6\2\5\1\7\1\10\1\11\2\2" + "\1\12\1\1\2\13\2\0\1\14\1\15\1\16\1\5"
			+ "\7\0\2\5\1\0\2\5\1\0\1\5\1\0\2\5" + "\1\0\1\5\1\17\1\20\2\0\2\1\1\0\1\14"
			+ "\1\0\1\5\1\0\1\21\3\0\1\21\1\0\1\22" + "\1\0\1\22\1\23\2\0\1\22\1\0\1\5\2\21"
			+ "\4\5\1\22\1\5\1\23\2\24\1\25\1\0\1\25" + "\1\0\1\24\1\0\2\24\2\0\1\26\2\5\1\25"
			+ "\1\5\1\26\1\5\5\0\2\27\1\0\2\27\4\5" + "\10\0\4\5\1\0\1\30\1\0\3\30\3\0\3\5"
			+ "\1\30\5\0\3\5\1\31\1\0\1\31\3\32\1\31" + "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"
			+ "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0" + "\1\5\2\33";

	private static int[] zzUnpackAction() {
		int[] result = new int[181];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\46\0\114\0\162\0\230\0\162\0\276\0\162"
			+ "\0\162\0\344\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8"
			+ "\0\u01ee\0\162\0\u0214\0\u023a\0\162\0\162\0\162\0\u0260"
			+ "\0\u0286\0\162\0\u02ac\0\u02d2\0\u02f8\0\230\0\u031e\0\162"
			+ "\0\162\0\162\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402"
			+ "\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532"
			+ "\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662"
			+ "\0\u02d2\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\230\0\u0720\0\u0746"
			+ "\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\162\0\u082a\0\u0850"
			+ "\0\u0876\0\162\0\162\0\u089c\0\u08c2\0\u08e8\0\u08e8\0\u090e"
			+ "\0\u010a\0\u0876\0\u0934\0\u095a\0\u0980\0\u09a6\0\u010a\0\u09cc"
			+ "\0\u010a\0\162\0\u010a\0\u09f2\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a"
			+ "\0\u0a8a\0\u0ab0\0\u0a18\0\u0ad6\0\u0afc\0\162\0\u0b22\0\u0b48"
			+ "\0\u0b6e\0\u0b94\0\u010a\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52"
			+ "\0\u0c78\0\162\0\u0c9e\0\u0cc4\0\u0cc4\0\u010a\0\u0cea\0\u0d10"
			+ "\0\u0d36\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40"
			+ "\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70"
			+ "\0\u0f96\0\162\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054"
			+ "\0\u107a\0\u10a0\0\u010a\0\u10c6\0\u10ec\0\u1112\0\u1138\0\u115e"
			+ "\0\u1184\0\u11aa\0\u11d0\0\162\0\u11f6\0\u11f6\0\162\0\u11f6"
			+ "\0\u010a\0\u010a\0\u121c\0\u1242\0\u1268\0\u128e\0\u12b4\0\u12da"
			+ "\0\u1300\0\u1326\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a"
			+ "\0\u1430\0\u1456\0\u147c\0\162\0\u010a";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[181];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\3\4\1\5\1\6\1\7\1\4\1\10\1\11\1\12"
			+ "\1\13\1\14\1\13\1\15\1\13\1\16\1\13\1\17" + "\1\20\1\21\2\13\1\22\1\23\1\24\2\13\1\25"
			+ "\1\26\1\27\2\13\1\30\1\13\1\4\1\31\6\6" + "\1\32\41\6\4\33\1\6\1\34\1\35\37\33\46\0"
			+ "\2\36\1\37\1\40\1\0\41\36\5\0\1\41\1\42" + "\50\0\1\13\1\43\1\44\12\13\1\0\4\13\3\0"
			+ "\5\13\14\0\2\13\1\0\12\13\1\0\4\13\3\0" + "\5\13\14\0\1\45\1\44\1\46\2\0\1\47\4\0"
			+ "\1\50\1\51\32\0\2\13\1\52\2\13\1\53\7\13" + "\1\0\4\13\3\0\5\13\14\0\1\54\1\13\1\55"
			+ "\2\13\1\56\7\13\1\0\4\13\3\0\5\13\14\0" + "\1\57\1\13\1\60\12\13\1\0\4\13\3\0\5\13"
			+ "\14\0\1\61\1\13\1\62\12\13\1\0\4\13\3\0" + "\5\13\14\0\2\13\1\51\10\13\1\63\1\13\1\0"
			+ "\4\13\3\0\5\13\14\0\1\64\1\13\1\65\12\13" + "\1\0\4\13\3\0\5\13\14\0\2\13\1\50\7\13"
			+ "\1\66\2\13\1\0\4\13\3\0\5\13\14\0\2\67" + "\1\0\12\67\1\0\4\67\3\0\2\67\1\0\1\67"
			+ "\15\0\2\70\1\0\12\70\1\0\4\70\3\0\2\70" + "\1\0\1\70\4\0\4\33\1\0\1\71\1\72\43\33"
			+ "\1\0\1\73\1\0\43\33\1\0\1\32\1\74\37\33" + "\1\36\1\75\1\37\1\76\1\77\40\36\1\75\11\0"
			+ "\1\100\1\13\1\101\12\13\1\0\4\13\3\0\5\13" + "\14\0\1\101\1\0\1\101\45\0\1\102\5\0\1\103"
			+ "\1\104\5\0\1\105\6\0\1\106\17\0\1\107\1\0" + "\1\110\5\0\1\103\1\104\1\0\1\111\2\0\1\112"
			+ "\1\105\1\0\1\113\4\0\1\106\17\0\1\114\1\0" + "\1\115\10\0\1\111\34\0\1\113\16\0\1\113\26\0"
			+ "\1\116\6\0\1\117\4\0\1\112\27\0\1\114\1\0" + "\1\114\43\0\1\120\1\13\1\114\12\13\1\0\4\13"
			+ "\3\0\5\13\14\0\2\13\1\106\12\13\1\0\4\13" + "\3\0\1\13\1\121\3\13\16\0\1\122\10\0\1\111"
			+ "\12\0\1\106\17\0\2\13\1\111\10\13\1\123\1\13" + "\1\0\4\13\3\0\5\13\14\0\2\13\1\104\6\13"
			+ "\1\124\3\13\1\0\4\13\3\0\5\13\16\0\1\104" + "\6\0\1\104\34\0\2\13\1\103\5\13\1\125\4\13"
			+ "\1\0\4\13\3\0\5\13\16\0\1\103\5\0\1\103" + "\35\0\2\13\1\116\6\13\1\126\3\13\1\0\1\127"
			+ "\3\13\3\0\5\13\14\0\2\13\1\105\12\13\1\0" + "\1\13\1\130\2\13\3\0\5\13\16\0\1\105\14\0"
			+ "\1\105\26\0\2\13\1\113\12\13\1\0\3\13\1\131" + "\3\0\5\13\14\0\2\67\1\0\12\67\1\0\4\67"
			+ "\3\0\5\67\14\0\2\70\1\0\12\70\1\0\4\70" + "\3\0\5\70\3\0\4\33\2\0\1\74\43\33\1\0"
			+ "\1\73\1\72\43\33\1\0\1\71\1\74\37\33\1\36" + "\1\75\1\37\1\40\1\77\40\36\1\75\1\0\1\77"
			+ "\1\36\1\0\1\77\40\0\1\77\11\0\2\13\1\132" + "\1\133\11\13\1\0\4\13\3\0\5\13\16\0\2\132"
			+ "\44\0\1\134\1\135\4\0\1\136\7\0\1\137\27\0" + "\2\135\44\0\1\136\5\0\1\136\37\0\1\137\15\0"
			+ "\1\137\27\0\1\140\1\132\2\0\1\141\41\0\1\142" + "\1\143\2\0\1\141\1\0\1\136\1\144\6\0\1\137"
			+ "\27\0\1\144\6\0\1\144\36\0\1\141\3\0\1\141" + "\41\0\1\145\3\0\1\141\2\0\1\144\36\0\1\146"
			+ "\5\0\1\146\35\0\2\13\1\141\3\13\1\147\6\13" + "\1\0\4\13\3\0\5\13\14\0\2\13\1\144\6\13"
			+ "\1\150\3\13\1\0\4\13\3\0\5\13\14\0\2\13" + "\1\136\5\13\1\151\4\13\1\0\4\13\3\0\5\13"
			+ "\14\0\2\13\1\135\1\152\11\13\1\0\4\13\3\0" + "\5\13\14\0\2\13\1\146\5\13\1\153\4\13\1\0"
			+ "\4\13\3\0\5\13\14\0\2\13\1\137\12\13\1\0" + "\2\13\1\154\1\13\3\0\5\13\14\0\1\155\1\0"
			+ "\1\156\2\0\1\157\42\0\1\160\2\0\1\160\40\0" + "\1\155\1\0\1\155\45\0\1\161\2\0\1\161\42\0"
			+ "\1\162\4\0\1\162\36\0\1\155\1\0\1\163\1\164" + "\1\0\1\157\1\0\1\162\40\0\2\164\44\0\1\165"
			+ "\1\164\3\0\1\162\36\0\2\13\1\162\4\13\1\166" + "\5\13\1\0\4\13\3\0\5\13\14\0\2\13\1\164"
			+ "\1\167\11\13\1\0\4\13\3\0\5\13\14\0\1\170" + "\1\13\1\155\12\13\1\0\4\13\3\0\5\13\14\0"
			+ "\2\13\1\160\2\13\1\171\7\13\1\0\4\13\3\0" + "\5\13\14\0\2\13\1\161\2\13\1\172\7\13\1\0"
			+ "\4\13\3\0\5\13\15\0\2\173\44\0\1\173\1\174" + "\3\0\1\175\12\0\1\176\26\0\1\177\3\0\1\175"
			+ "\12\0\1\176\26\0\1\175\3\0\1\175\41\0\1\176" + "\16\0\1\176\25\0\1\173\1\200\3\0\1\201\12\0"
			+ "\1\176\26\0\1\202\3\0\1\202\37\0\2\13\1\202" + "\3\13\1\203\6\13\1\0\4\13\3\0\5\13\14\0"
			+ "\1\13\1\204\1\173\12\13\1\0\4\13\3\0\5\13" + "\14\0\2\13\1\175\3\13\1\205\6\13\1\0\4\13"
			+ "\3\0\5\13\14\0\2\13\1\176\12\13\1\0\3\13" + "\1\206\3\0\5\13\16\0\1\207\7\0\1\207\35\0"
			+ "\1\210\3\0\1\211\1\0\1\212\1\0\1\207\35\0" + "\1\211\3\0\1\211\41\0\1\212\5\0\1\212\37\0"
			+ "\1\213\3\0\1\211\1\0\1\212\37\0\1\214\3\0" + "\1\211\1\0\1\212\1\0\1\215\35\0\1\216\3\0"
			+ "\1\211\3\0\1\217\35\0\1\217\7\0\1\217\33\0" + "\2\13\1\217\7\13\1\220\2\13\1\0\4\13\3\0"
			+ "\5\13\14\0\2\13\1\207\7\13\1\221\2\13\1\0" + "\4\13\3\0\5\13\14\0\2\13\1\211\3\13\1\222"
			+ "\6\13\1\0\4\13\3\0\5\13\14\0\2\13\1\212" + "\5\13\1\223\4\13\1\0\4\13\3\0\5\13\16\0"
			+ "\1\224\6\0\1\224\34\0\1\225\1\0\1\226\6\0" + "\1\224\34\0\1\225\1\0\1\225\43\0\1\225\1\0"
			+ "\1\226\6\0\1\224\2\0\1\227\33\0\1\224\6\0" + "\1\224\2\0\1\227\31\0\1\225\1\0\1\230\11\0"
			+ "\1\227\33\0\1\227\11\0\1\227\31\0\2\13\1\227" + "\11\13\1\231\1\0\4\13\3\0\5\13\14\0\2\13"
			+ "\1\224\6\13\1\232\3\13\1\0\4\13\3\0\5\13" + "\14\0\1\233\1\13\1\225\12\13\1\0\4\13\3\0"
			+ "\5\13\16\0\1\234\5\0\1\234\37\0\1\235\10\0" + "\1\235\34\0\1\236\5\0\1\234\2\0\1\235\34\0"
			+ "\1\237\5\0\1\237\37\0\1\240\5\0\1\237\2\0" + "\1\235\32\0\2\13\1\237\5\13\1\241\4\13\1\0"
			+ "\4\13\3\0\5\13\14\0\2\13\1\234\5\13\1\242" + "\4\13\1\0\4\13\3\0\5\13\14\0\2\13\1\235"
			+ "\10\13\1\243\1\13\1\0\4\13\3\0\5\13\16\0" + "\1\244\5\0\1\244\35\0\2\13\1\244\5\13\1\245"
			+ "\4\13\1\0\4\13\3\0\5\13\16\0\1\246\7\0" + "\1\246\33\0\2\13\1\246\7\13\1\247\2\13\1\0"
			+ "\4\13\3\0\5\13\16\0\1\250\10\0\1\250\32\0" + "\2\13\1\250\10\13\1\251\1\13\1\0\4\13\3\0"
			+ "\5\13\16\0\1\252\5\0\1\252\35\0\2\13\1\252" + "\5\13\1\253\4\13\1\0\4\13\3\0\5\13\14\0"
			+ "\1\254\1\0\1\254\43\0\1\255\1\13\1\254\12\13" + "\1\0\4\13\3\0\5\13\16\0\1\256\3\0\1\256"
			+ "\37\0\2\13\1\256\3\13\1\257\6\13\1\0\4\13" + "\3\0\5\13\16\0\1\260\22\0\1\260\20\0\2\13"
			+ "\1\260\12\13\1\0\4\13\3\0\1\261\4\13\16\0" + "\1\262\15\0\1\262\25\0\2\13\1\262\12\13\1\0"
			+ "\2\13\1\263\1\13\3\0\5\13\16\0\1\264\16\0" + "\1\264\24\0\2\13\1\264\12\13\1\0\3\13\1\265"
			+ "\3\0\5\13\3\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[5282];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\1\1\1\11\1\1\1\11\1\1\2\11\10\1"
			+ "\1\11\2\1\3\11\2\1\1\11\3\1\2\0\3\11" + "\1\1\7\0\2\1\1\0\2\1\1\0\1\1\1\0"
			+ "\2\1\1\0\3\1\2\0\2\1\1\0\1\1\1\0" + "\1\1\1\0\1\1\3\0\1\11\1\0\1\1\1\0"
			+ "\2\11\2\0\1\1\1\0\12\1\1\11\2\1\1\0" + "\1\1\1\0\1\1\1\0\2\1\2\0\1\11\6\1"
			+ "\5\0\1\11\1\1\1\0\6\1\10\0\4\1\1\0" + "\1\1\1\0\1\11\2\1\3\0\4\1\5\0\3\1"
			+ "\1\11\1\0\1\1\1\11\4\1\1\0\1\1\1\0" + "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0" + "\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[181];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the textposition at the last state to be included in yytext */
	private int zzPushbackPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	public int getLineNumber() {
		return yyline;
	}

	public int getColumn() {
		return yycolumn;
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this constructor.
	 * 
	 * @param in
	 *           the java.io.Reader to read input from.
	 */
	public ScriptReaderLexer(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this constructor.
	 * 
	 * @param in
	 *           the java.io.Inputstream to read input from.
	 */
	public ScriptReaderLexer(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *           the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 162) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *               if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzPushbackPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

		if (numRead < 0) {
			return true;
		}
		else {
			zzEndRead += numRead;
			return false;
		}
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be reused (internal buffer is discarded and
	 * lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *           the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *           the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *           the position of the character to fetch. A value from 0 to yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen". If this method is called, something is seriously
	 * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error fallback rules.
	 * 
	 * @param errorCode
	 *           the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *           the number of characters to be read again. This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error
	 * occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *               if any I/O-Error occurs
	 */
	public java_cup.runtime.Symbol next_token() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = zzLexicalState;

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					}
					else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 15: {
				return new Symbol(ScriptReaderSym.VARIABLE, new String(yytext().substring(1)));
			}
			case 28:
				break;
			case 20: {
				return new Symbol(ScriptReaderSym.EXEC);
			}
			case 29:
				break;
			case 27: {
				return new Symbol(ScriptReaderSym.CURRENTINTERVAL);
			}
			case 30:
				break;
			case 11: {
				System.out.println("ERROR: Unclosed comment at line " + (yyline + 1));
			}
			case 31:
				break;
			case 23: {
				return new Symbol(ScriptReaderSym.QUERY);
			}
			case 32:
				break;
			case 9: {
				return new Symbol(ScriptReaderSym.CLOSEPAREN);
			}
			case 33:
				break;
			case 14: {
				yybegin(commentstyle2);
			}
			case 34:
				break;
			case 10: {
				yybegin(YYINITIAL);
			}
			case 35:
				break;
			case 7: {
				return new Symbol(ScriptReaderSym.SEMICOLON);
			}
			case 36:
				break;
			case 6: {
				return new Symbol(ScriptReaderSym.NEGATION);
			}
			case 37:
				break;
			case 4: {
				return new Symbol(ScriptReaderSym.CLOSEBRACKET);
			}
			case 38:
				break;
			case 3: {
				return new Symbol(ScriptReaderSym.OPENBRACKET);
			}
			case 39:
				break;
			case 24: {
				return new Symbol(ScriptReaderSym.DEFAULT);
			}
			case 40:
				break;
			case 19: {
				return new Symbol(ScriptReaderSym.FIL);
			}
			case 41:
				break;
			case 16: {
				return new Symbol(ScriptReaderSym.QUERYVAR, new String(yytext()));
			}
			case 42:
				break;
			case 12: {
				return new Symbol(ScriptReaderSym.STR, new String(yytext()));
			}
			case 43:
				break;
			case 21: {
				return new Symbol(ScriptReaderSym.TEST);
			}
			case 44:
				break;
			case 18: {
				return new Symbol(ScriptReaderSym.IND);
			}
			case 45:
				break;
			case 13: {
				yybegin(commentstyle1);
			}
			case 46:
				break;
			case 2: {
				System.out.println("Unknown character " + yytext() + " at line " + (yyline + 1));
			}
			case 47:
				break;
			case 5: {
				return new Symbol(ScriptReaderSym.IDENTIFIER, new String(yytext()));
			}
			case 48:
				break;
			case 22: {
				return new Symbol(ScriptReaderSym.INST);
			}
			case 49:
				break;
			case 8: {
				return new Symbol(ScriptReaderSym.OPENPAREN);
			}
			case 50:
				break;
			case 26: {
				return new Symbol(ScriptReaderSym.RUN);
			}
			case 51:
				break;
			case 17: {
				return new Symbol(ScriptReaderSym.REM);
			}
			case 52:
				break;
			case 25: {
				return new Symbol(ScriptReaderSym.TESTEXIST);
			}
			case 53:
				break;
			case 1: {
			}
			case 54:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					zzDoEOF();
					{
						return new java_cup.runtime.Symbol(ScriptReaderSym.EOF);
					}
				}
				else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
