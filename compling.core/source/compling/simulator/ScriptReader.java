// ----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Sun Dec 16 14:43:24 PST 2007
//----------------------------------------------------

package compling.simulator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.logging.Logger;

import java_cup.runtime.Symbol;

import compling.context.ContextException.NoInstanceFoundException;
import compling.context.ContextUtilities.QueryResultPrinter;
import compling.context.MiniOntology;
import compling.context.MiniOntologyQueryAPI;
import compling.context.MiniOntologyQueryAPI.SimpleQuery;
import compling.simulator.ScriptReader.IDorVAR;
import compling.simulator.SimulationParameters.BindingSet;
import compling.simulator.SimulationParameters.Value;
import compling.simulator.Simulator.SimulatorMode;
import compling.util.MapSet;

/**
 * CUP v0.10k TUM Edition 20050516 generated parser.
 * 
 * @version Sun Dec 16 14:43:24 PST 2007
 */
public class ScriptReader extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public ScriptReader() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public ScriptReader(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\100\000\002\004\005\000\002\002\004\000\002\005"
			+ "\004\000\002\005\003\000\002\006\003\000\002\006\003"
			+ "\000\002\006\003\000\002\006\003\000\002\006\003\000"
			+ "\002\006\003\000\002\007\007\000\002\010\003\000\002"
			+ "\010\003\000\002\010\003\000\002\010\003\000\002\010"
			+ "\003\000\002\010\003\000\002\003\003\000\002\003\003"
			+ "\000\002\015\005\000\002\016\006\000\002\016\006\000"
			+ "\002\016\006\000\002\016\006\000\002\025\010\000\002"
			+ "\025\006\000\002\025\005\000\002\022\004\000\002\022"
			+ "\002\000\002\023\007\000\002\023\007\000\002\023\002"
			+ "\000\002\024\003\000\002\024\005\000\002\024\003\000"
			+ "\002\020\006\000\002\020\006\000\002\020\006\000\002"
			+ "\020\006\000\002\021\005\000\002\017\004\000\002\011"
			+ "\006\000\002\011\005\000\002\026\006\000\002\026\002"
			+ "\000\002\027\004\000\002\027\005\000\002\027\005\000"
			+ "\002\027\005\000\002\027\005\000\002\030\006\000\002"
			+ "\030\005\000\002\012\005\000\002\031\006\000\002\031"
			+ "\002\000\002\032\004\000\002\032\005\000\002\032\005"
			+ "\000\002\032\005\000\002\032\005\000\002\032\005\000" + "\002\032\005\000\002\013\010\000\002\014\010" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\200\000\004\013\005\001\002\000\004\002\202\001"
			+ "\002\000\016\004\011\005\017\006\006\007\015\010\016"
			+ "\011\023\001\002\000\010\012\uffcb\015\uffcb\017\176\001"
			+ "\002\000\020\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc"
			+ "\011\ufffc\014\ufffc\001\002\000\020\004\ufff9\005\ufff9\006"
			+ "\ufff9\007\ufff9\010\ufff9\011\ufff9\014\ufff9\001\002\000\004"
			+ "\015\132\001\002\000\020\004\ufffb\005\ufffb\006\ufffb\007"
			+ "\ufffb\010\ufffb\011\ufffb\014\ufffb\001\002\000\020\004\ufffe"
			+ "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\014\ufffe\001"
			+ "\002\000\020\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd"
			+ "\011\ufffd\014\ufffd\001\002\000\006\012\uffcb\015\uffcb\001"
			+ "\002\000\004\015\103\001\002\000\010\012\uffd5\015\uffd5"
			+ "\017\064\001\002\000\020\004\011\005\017\006\006\007"
			+ "\015\010\016\011\023\014\062\001\002\000\020\004\ufff8"
			+ "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\014\ufff8\001"
			+ "\002\000\020\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa"
			+ "\011\ufffa\014\ufffa\001\002\000\004\015\024\001\002\000"
			+ "\004\020\025\001\002\000\006\015\uffe2\016\uffe2\001\002"
			+ "\000\006\015\030\016\027\001\002\000\004\012\060\001"
			+ "\002\000\004\020\031\001\002\000\012\015\035\020\034"
			+ "\021\036\023\033\001\002\000\004\016\057\001\002\000"
			+ "\004\016\uffdf\001\002\000\004\016\uffe1\001\002\000\004"
			+ "\026\040\001\002\000\004\016\037\001\002\000\006\015"
			+ "\uffe3\016\uffe3\001\002\000\006\020\044\021\045\001\002"
			+ "\000\004\016\042\001\002\000\004\016\uffe0\001\002\000"
			+ "\004\020\051\001\002\000\010\016\uffe5\020\ufff0\025\047"
			+ "\001\002\000\014\016\uffef\020\uffef\021\uffef\022\uffef\025"
			+ "\uffef\001\002\000\004\016\uffe7\001\002\000\006\015\uffe2"
			+ "\016\uffe2\001\002\000\006\015\030\016\uffe6\001\002\000"
			+ "\012\016\uffe5\020\053\021\045\025\047\001\002\000\006"
			+ "\020\053\021\045\001\002\000\014\016\ufff0\020\ufff0\021"
			+ "\ufff0\022\ufff0\025\ufff0\001\002\000\004\016\uffe8\001\002"
			+ "\000\006\016\uffe5\025\047\001\002\000\004\016\uffe9\001"
			+ "\002\000\006\015\uffe4\016\uffe4\001\002\000\020\004\uffc2"
			+ "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\014\uffc2\001"
			+ "\002\000\020\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff"
			+ "\011\uffff\014\uffff\001\002\000\004\002\001\001\002\000"
			+ "\006\012\102\015\067\001\002\000\006\012\uffd5\015\uffd5"
			+ "\001\002\000\006\012\066\015\067\001\002\000\020\004"
			+ "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\014\uffd8"
			+ "\001\002\000\006\020\053\021\045\001\002\000\006\020"
			+ "\074\021\075\001\002\000\004\016\072\001\002\000\006"
			+ "\012\uffd6\015\uffd6\001\002\000\006\020\101\023\100\001"
			+ "\002\000\012\016\uffd4\020\ufff0\021\077\023\ufff0\001\002"
			+ "\000\010\020\uffef\021\076\023\uffef\001\002\000\004\016"
			+ "\uffd0\001\002\000\004\016\uffd1\001\002\000\004\016\uffd2"
			+ "\001\002\000\004\016\uffd3\001\002\000\020\004\uffd7\005"
			+ "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\014\uffd7\001\002"
			+ "\000\004\021\104\001\002\000\006\020\053\021\045\001"
			+ "\002\000\004\016\106\001\002\000\004\012\107\001\002"
			+ "\000\020\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011"
			+ "\uffc3\014\uffc3\001\002\000\006\012\111\015\112\001\002"
			+ "\000\020\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011"
			+ "\uffcd\014\uffcd\001\002\000\006\020\115\022\113\001\002"
			+ "\000\010\020\126\021\045\022\125\001\002\000\004\016"
			+ "\123\001\002\000\010\020\053\021\045\022\117\001\002"
			+ "\000\004\022\122\001\002\000\010\020\053\021\045\022"
			+ "\121\001\002\000\004\016\uffc8\001\002\000\004\016\uffc7"
			+ "\001\002\000\004\016\uffc9\001\002\000\006\012\uffcc\015"
			+ "\uffcc\001\002\000\004\022\131\001\002\000\010\020\053"
			+ "\021\045\022\130\001\002\000\006\016\uffca\022\ufff0\001"
			+ "\002\000\004\016\uffc5\001\002\000\004\016\uffc4\001\002"
			+ "\000\004\016\uffc6\001\002\000\014\024\143\025\136\026"
			+ "\040\027\140\030\135\001\002\000\004\016\ufff1\001\002"
			+ "\000\004\016\173\001\002\000\004\020\163\001\002\000"
			+ "\006\020\151\021\152\001\002\000\004\016\ufff6\001\002"
			+ "\000\006\020\053\021\045\001\002\000\004\016\ufff3\001"
			+ "\002\000\004\016\ufff5\001\002\000\006\020\053\021\045"
			+ "\001\002\000\004\016\ufff2\001\002\000\004\016\ufff4\001"
			+ "\002\000\004\020\147\001\002\000\004\016\uffee\001\002"
			+ "\000\004\016\uffd9\001\002\000\006\020\156\021\157\001"
			+ "\002\000\004\021\153\001\002\000\004\021\154\001\002"
			+ "\000\004\016\uffea\001\002\000\010\015\035\020\034\023"
			+ "\033\001\002\000\012\015\ufff0\020\ufff0\021\161\023\ufff0"
			+ "\001\002\000\012\015\uffef\020\uffef\021\160\023\uffef\001"
			+ "\002\000\004\016\uffeb\001\002\000\004\016\uffec\001\002"
			+ "\000\004\016\uffed\001\002\000\006\020\165\021\166\001"
			+ "\002\000\010\016\uffda\020\171\023\172\001\002\000\012"
			+ "\016\ufff0\020\ufff0\021\170\023\ufff0\001\002\000\012\016"
			+ "\uffef\020\uffef\021\167\023\uffef\001\002\000\004\016\uffdb"
			+ "\001\002\000\004\016\uffdc\001\002\000\004\016\uffde\001"
			+ "\002\000\004\016\uffdd\001\002\000\004\012\174\001\002"
			+ "\000\020\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011"
			+ "\ufff7\014\ufff7\001\002\000\006\012\201\015\112\001\002"
			+ "\000\006\012\uffcb\015\uffcb\001\002\000\006\012\200\015"
			+ "\112\001\002\000\020\004\uffcf\005\uffcf\006\uffcf\007\uffcf"
			+ "\010\uffcf\011\uffcf\014\uffcf\001\002\000\020\004\uffce\005"
			+ "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\014\uffce\001\002" + "\000\004\002\000\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\200\000\004\004\003\001\001\000\002\001\001\000"
			+ "\022\005\017\006\012\007\013\011\006\012\021\013\007"
			+ "\014\020\030\011\001\001\000\004\031\174\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\004\031"
			+ "\107\001\001\000\002\001\001\000\004\026\062\001\001"
			+ "\000\020\006\060\007\013\011\006\012\021\013\007\014"
			+ "\020\030\011\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\004\023\025\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\024\031\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\004\025\040\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\003\042\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\022\045\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\023\047\001\001\000\002\001\001\000\006\003\051"
			+ "\022\053\001\001\000\004\003\054\001\001\000\002\001"
			+ "\001\000\002\001\001\000\004\022\055\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\004\026\064"
			+ "\001\001\000\002\001\001\000\002\001\001\000\006\003"
			+ "\067\027\070\001\001\000\004\003\072\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\004\003\104\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\004\032\113\001\001\000\004\003\123"
			+ "\001\001\000\002\001\001\000\004\003\115\001\001\000"
			+ "\002\001\001\000\004\003\117\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\004\003\126\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\020\010\133\015\136\016\141\017\132\020\140\021\143"
			+ "\025\144\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\003\147\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\003\145\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\003\154\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\004\024\161\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\004\003\163\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\031\176\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$ScriptReader$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$ScriptReader$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack,
			int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$ScriptReader$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	static int counter = 1;
	boolean isSuccessful = true;
	protected static Logger logger = Logger.getLogger(ScriptReader.class.getName());
	protected SimulationParameters parameters = new SimulationParameters();
	protected Simulator simulator = null;
	protected MiniOntology miniOntology = null;
	String scriptName = "";

	protected SimulatorMode mode = SimulatorMode.CONTEXTMODEL_UPDATE;

	public void user_init() {
//    	logger.setUseParentHandlers(false);
//    	logger.addHandler(new LoggingHandler());
	}

	public boolean isSuccessful() {
		return isSuccessful;
	}

	public boolean run(String scriptName, SimulatorMode mode) throws Exception {
		isSuccessful = true;
		this.scriptName = scriptName;
		this.mode = mode;
		parse();
		return isSuccessful;
	}

	public void setMiniOntology(MiniOntology miniOntology) {
		this.miniOntology = miniOntology;
	}

	public void setSimulator(Simulator simulator) {
		this.simulator = simulator;
	}

	public void setParameters(SimulationParameters parameters) {
		if (parameters != null) {
			this.parameters = parameters;
		}
	}

	public Set<Value> resolveValue(Value value) {
		String function = value.getFiller();
		Stack<String> funcs = new Stack<String>();
		int nextP = function.indexOf('(');
		int lastP = 0;
		while (nextP != -1) {
			funcs.push(function.substring(lastP, nextP));
			lastP = nextP + 1;
			nextP = function.indexOf('(', lastP);
		}

		PriorityQueue<String> oldDomains;
		PriorityQueue<String> newDomains = new PriorityQueue<String>();
		newDomains.add(function.substring(lastP, function.indexOf(')', lastP)));

		String func, domain;

		while (!funcs.isEmpty()) {
			oldDomains = newDomains;
			newDomains = new PriorityQueue<String>();
			func = funcs.pop();
			while ((domain = oldDomains.poll()) != null) {
				List<SimpleQuery> simpleQueries = new ArrayList<SimpleQuery>();
				simpleQueries.add(new SimpleQuery(func, domain, "?x"));
				List<HashMap<String, String>> queryResults = MiniOntologyQueryAPI.ask(miniOntology, simpleQueries);

				for (HashMap<String, String> map : queryResults) {
					for (String val : map.values()) {
						newDomains.add(QueryResultPrinter.getIndividualName(val));
					}
				}
			}
		}
		Set<Value> newFillers = new HashSet<Value>();
		for (String result : newDomains) {
			newFillers.add(new Value(result, false));
		}
		return newFillers;
	}

	public void groundOutVariable(String variable, boolean allowAnonymous) {
		Set<Value> params = parameters.getParameter(variable);
		Set<Value> toRemove = new HashSet<Value>();
		Set<Value> toAdd = new HashSet<Value>();

		if (params == null)
			return;

		for (Value param : params) {
			if (param.isFunc()) {
				Set<Value> evaluatedVal = resolveValue(param);
				toRemove.add(param);
				toAdd.addAll(evaluatedVal);
			}
			else if (param.isValue() && allowAnonymous) {
				String type = param.getFiller();
				String name = type.substring(0, 1).toLowerCase() + type.substring(1) + String.valueOf(counter);
				counter++;
				toRemove.add(param);
				toAdd.add(new Value(name, false));
				miniOntology.addIndividual(name, type);
			}
		}
		parameters.getParameter(variable).removeAll(toRemove);
		parameters.getParameter(variable).addAll(toAdd);
	}

	public List<String> addNewIntervals(String name, String type, String parent, String preceding, List<String> ofl) {

		List<String> names = new ArrayList<String>();
		BindingSet bindingset = generateBindingSetFromOFL(ofl);

		if (bindingset.size() > 1 && name != null) {
			throw new SimulatorException("incompatible sets of fillers supplied for one new interval instance");
		}

		if (name != null) {
			names.add(name);
			miniOntology.defineNewInterval(name, type, parent, preceding);
			logger.finest("(INST " + name + " " + type + " " + parent + " " + preceding + ")");
			if (bindingset.isEmpty()) {
				addRelationFillers(name, ofl, null);
			}
			else {
				addRelationFillers(name, ofl, bindingset.get(0));
			}
		}
		else {
			if (bindingset.isEmpty()) {
				name = type.substring(0, 1).toLowerCase() + type.substring(1) + String.valueOf(counter);
				counter++;
				miniOntology.defineNewInterval(name, type, parent, preceding);
				logger.finest("(INST " + name + " " + type + " " + parent + " " + preceding + ")");
				names.add(name);
			}
			else {
				for (MapSet<String, Value> instantiation : bindingset) {
					name = type.substring(0, 1).toLowerCase() + type.substring(1) + String.valueOf(counter);
					counter++;
					miniOntology.defineNewInterval(name, type, parent, preceding);
					logger.finest("(INST " + name + " " + type + " " + parent + " " + preceding + ")");
					addRelationFillers(name, ofl, instantiation);
					names.add(name);
				}
			}
		}
		return names;
	}

	protected BindingSet generateBindingSetFromOFL(List<String> ofl) {
		List<String> variables = new ArrayList<String>();
		for (String fil : ofl) {
			String triplet[] = fil.split(":");
			if (triplet[2].equals("true")) {
				groundOutVariable(triplet[1], true);
				variables.add(triplet[1]);
			}
		}
		if (variables.size() == 0) {
			return new BindingSet();
		}
		else {
			return parameters.generateInstantiations(variables);
		}
	}

	protected void addRelationFillers(String name, List<String> ofl, MapSet<String, Value> instantiation) {

		for (String fil : ofl) {
			String triplet[] = fil.split(":");
			if (triplet[2].equals("false")) { // is not a variable
				miniOntology.addRelationFiller(triplet[0], name, triplet[1]);
				logger.finest("(FIL " + triplet[0] + " " + name + " " + triplet[1] + ")");
			}
			else if (triplet[2].equals("true")) {
				if (instantiation != null && instantiation.get(triplet[1]) != null) {
					for (Value value : instantiation.get(triplet[1])) {
						miniOntology.addRelationFiller(triplet[0], name, value.getFiller());
						logger.finest("(FIL " + triplet[0] + " " + name + " " + value.getFiller() + ")");
					}
				}
			}
		}
	}

	public List<String> addNewIndividuals(String name, String type, List<String> ofl) {
		List<String> names = new ArrayList<String>();
		BindingSet bindingset = generateBindingSetFromOFL(ofl);

		if (bindingset.size() > 1 && name != null) {
			throw new SimulatorException("incompatible sets of fillers supplied for one new interval instance");
		}

		if (name != null) {
			names.add(name);
			miniOntology.addIndividual(name, type);
			logger.finest("(INST " + name + " " + type + ")");
			if (bindingset.isEmpty()) {
				addRelationFillers(name, ofl, null);
			}
			else {
				addRelationFillers(name, ofl, bindingset.get(0));
			}
		}
		else {
			if (bindingset.isEmpty()) {
				name = type.substring(0, 1).toLowerCase() + type.substring(1) + String.valueOf(counter);
				counter++;
				miniOntology.addIndividual(name, type);
				logger.finest("(INST " + name + " " + type + ")");
				names.add(name);
			}
			else {
				for (MapSet<String, Value> instantiation : bindingset) {
					name = type.substring(0, 1).toLowerCase() + type.substring(1) + String.valueOf(counter);
					counter++;
					miniOntology.addIndividual(name, type);
					addRelationFillers(name, ofl, instantiation);
					logger.finest("(INST " + name + " " + type + ")");
					names.add(name);
				}
			}
		}
		return names;
	}

	public boolean runScript(String scriptName, List<String> parameterList) {
		BindingSet bindingset = generateBindingSetFromOFL(parameterList);
		if (bindingset.size() > 1) {
			throw new SimulatorException("incompatible sets of parameters supplied for running the script " + scriptName);
		}

		SimulationParameters newParameters = new SimulationParameters();

		for (String newParameter : parameterList) {
			String triplet[] = newParameter.split(":");
			String newP = triplet[0];
			String oldP = triplet[1];
			if (bindingset.get(0).get(oldP) != null) {
				for (Value newV : bindingset.get(0).get(oldP)) {
					newParameters.addParameter(newP, newV);
				}
			}
		}

		return simulator.updateContextModel(scriptName, newParameters);
	}

	public void syntax_error(Symbol cur_token) {
		isSuccessful = false;
		report_error("Syntax error at SYM (" + cur_token + ")", null);
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
		isSuccessful = false;
		report_error("Fatal error at SYM (" + cur_token + ")", null);
	}

	public void report_error(String message, Object info) {
		ScriptReaderLexer scanner = (ScriptReaderLexer) getScanner();
		super.report_error("Error at " + scanner.getLineNumber() + ":" + scanner.getColumn() + " of " + scriptName
				+ ":\n" + message, null);
	}

	public static class IDorVAR extends ArrayList<String> {
		protected String varName;

		public IDorVAR(String IDs, String varName) {
			super();
			this.add(IDs);
			this.varName = varName;
		}

		public IDorVAR(List<String> IDs, String varName) {
			super();
			this.addAll(IDs);
			this.varName = varName;
		}

		public String getVarName() {
			return varName;
		}
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$ScriptReader$actions {
	private final ScriptReader parser;

	/** Constructor */
	CUP$ScriptReader$actions(ScriptReader parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$ScriptReader$do_action(int CUP$ScriptReader$act_num,
			java_cup.runtime.lr_parser CUP$ScriptReader$parser, java.util.Stack CUP$ScriptReader$stack,
			int CUP$ScriptReader$top) throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$ScriptReader$result;

		/* select the action based on the action number */
		switch (CUP$ScriptReader$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 63: // run_prim ::= RUN OPENPAREN IDENTIFIER fil_pair_list CLOSEPAREN SEMICOLON
		{
			Object RESULT = null;
			int scriptNameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left;
			int scriptNameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).right;
			String scriptName = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 3)).value;
			int fplleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int fplright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			List<String> fpl = (List<String>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;

			if (parser.isSuccessful) {
				parser.isSuccessful = parser.runScript(scriptName, fpl);
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(10/* run_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 62: // default_prim ::= DEFAULT OPENPAREN VARIABLE id_or_var CLOSEPAREN SEMICOLON
		{
			Object RESULT = null;
			int varleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left;
			int varright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).right;
			String var = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).value;
			int fillersleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int fillersright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			IDorVAR fillers = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;

			Set<Value> params = parser.parameters.getParameter(var);
			if (params == null) {
				for (String filler : fillers) {
					parser.parameters.addParameter(var, new Value(filler, false));
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(9/* default_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // query_command_prim ::= QUERYVAR QUERYVAR QUERYVAR
		{
			List<SimpleQuery> RESULT = null;
			int queryVar1left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int queryVar1right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String queryVar1 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int queryVar2left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int queryVar2right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String queryVar2 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int queryVar3left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int queryVar3right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String queryVar3 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			queries.add(new SimpleQuery(queryVar1, queryVar2, queryVar3));
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(24/* query_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // query_command_prim ::= QUERYVAR QUERYVAR id_or_var
		{
			List<SimpleQuery> RESULT = null;
			int queryVar1left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int queryVar1right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String queryVar1 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int queryVar2left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int queryVar2right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String queryVar2 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int valuesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int valuesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			IDorVAR values = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			for (String value : values) {
				queries.add(new SimpleQuery(queryVar1, queryVar2, value));
			}
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(24/* query_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // query_command_prim ::= QUERYVAR id_or_var QUERYVAR
		{
			List<SimpleQuery> RESULT = null;
			int queryVar1left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int queryVar1right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String queryVar1 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int queryVar2left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int queryVar2right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String queryVar2 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			for (String holder : names) {
				queries.add(new SimpleQuery(queryVar1, holder, queryVar2));
			}
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(24/* query_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // query_command_prim ::= IDENTIFIER QUERYVAR QUERYVAR
		{
			List<SimpleQuery> RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int queryVar1left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int queryVar1right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String queryVar1 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int queryVar2left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int queryVar2right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String queryVar2 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			queries.add(new SimpleQuery(relname, queryVar1, queryVar2));
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(24/* query_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // query_command_prim ::= IDENTIFIER QUERYVAR id_or_var
		{
			List<SimpleQuery> RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int queryVarleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int queryVarright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String queryVar = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int valuesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int valuesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			IDorVAR values = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			for (String value : values) {
				queries.add(new SimpleQuery(relname, queryVar, value));
			}
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(24/* query_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // query_command_prim ::= IDENTIFIER id_or_var QUERYVAR
		{
			List<SimpleQuery> RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int queryVarleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int queryVarright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String queryVar = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			for (String holder : names) {
				queries.add(new SimpleQuery(relname, holder, queryVar));
			}
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(24/* query_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // query_command_prim ::= QUERYVAR IDENTIFIER
		{
			List<SimpleQuery> RESULT = null;
			int queryVarleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int queryVarright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String queryVar = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String type = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			queries.add(new SimpleQuery(queryVar, type));
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(24/* query_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // query_command_list ::=
		{
			List<SimpleQuery> RESULT = null;

			RESULT = new ArrayList<SimpleQuery>();

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(23/* query_command_list */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // query_command_list ::= query_command_list OPENPAREN query_command_prim CLOSEPAREN
		{
			List<SimpleQuery> RESULT = null;
			int qclleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left;
			int qclright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).right;
			List<SimpleQuery> qcl = (List<SimpleQuery>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 3)).value;
			int queryleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int queryright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			List<SimpleQuery> query = (List<SimpleQuery>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;

			qcl.addAll(query);
			RESULT = qcl;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(23/* query_command_list */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // query_prim ::= QUERY query_command_list SEMICOLON
		{
			Object RESULT = null;
			int qclleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int qclright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			List<SimpleQuery> qcl = (List<SimpleQuery>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;

			if (parser.isSuccessful) {
				parser.logger.finest("query: " + qcl);
				List<HashMap<String, String>> results = MiniOntologyQueryAPI.ask(parser.miniOntology, qcl);
				parser.logger.finest(results == null ? "null" : results.toString());

				if (results != null && !results.isEmpty()) {
					List<HashMap<String, Value>> bindingSet = new ArrayList<HashMap<String, Value>>();
					for (HashMap<String, String> result : results) {
						HashMap<String, Value> assignment = new HashMap<String, Value>();
						for (String key : result.keySet()) {

							String value = result.get(key);
							// System.out.println(value);
							if (QueryResultPrinter.isTypedFiller(value)) {
								value = QueryResultPrinter.getIndividualName(value);
							}
							assignment.put(key.substring(1), new Value(value, false));
						}
						bindingSet.add(assignment);
					}
					parser.parameters.addAssignmentConstraint(new BindingSet(bindingSet));
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(8/* query_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // testexist_prim ::= TESTEXIST query_command_list SEMICOLON
		{
			List<SimpleQuery> RESULT = null;
			int qclleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int qclright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			List<SimpleQuery> qcl = (List<SimpleQuery>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;

			if (parser.isSuccessful) {
				parser.logger.finest("testexist: " + qcl);
				List<HashMap<String, String>> results = MiniOntologyQueryAPI.ask(parser.miniOntology, qcl);
				parser.logger.finest(results == null ? "null" : results.toString());
				parser.isSuccessful = (results != null && !results.isEmpty());
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(22/* testexist_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // testexist_prim ::= TESTEXIST NEGATION query_command_list SEMICOLON
		{
			List<SimpleQuery> RESULT = null;
			int qclleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int qclright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			List<SimpleQuery> qcl = (List<SimpleQuery>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;

			if (parser.isSuccessful) {
				parser.logger.finest("testexist: !" + qcl);
				List<HashMap<String, String>> results = MiniOntologyQueryAPI.ask(parser.miniOntology, qcl);
				parser.logger.finest(results == null ? "null" : results.toString());
				parser.isSuccessful = (results == null || results.isEmpty());
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(22/* testexist_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // test_command_prim ::= id_or_var VARIABLE VARIABLE
		{
			List<SimpleQuery> RESULT = null;
			int relnamesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnamesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			IDorVAR relnames = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int var1left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int var1right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String var1 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).value;
			int var2left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int var2right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String var2 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			if (relnames.getVarName() != null) {
				String var0 = relnames.getVarName();
				parser.groundOutVariable(var0, false);
				parser.groundOutVariable(var1, false);
				parser.groundOutVariable(var2, false);

				List<String> variables = new ArrayList<String>();
				variables.add(var0);
				variables.add(var1);
				variables.add(var2);

				BindingSet bindingSet = parser.parameters.generateInstantiations(variables);
				if (bindingSet.isEmpty() || !bindingSet.get(0).containsKey(var0) || !bindingSet.get(0).containsKey(var1)
						|| !bindingSet.get(0).containsKey(var2)) {
					parser.logger
							.finest("test not carried out because one or more arguments do not have parameters supplied");
				}
				else {
					for (MapSet<String, Value> instantiation : bindingSet) {
						for (Value v0 : instantiation.get(var0)) {
							for (Value v1 : instantiation.get(var1)) {
								for (Value v2 : instantiation.get(var2)) {
									queries.add(new SimpleQuery(v0.getFiller(), v1.getFiller(), v2.getFiller()));
								}
							}
						}
					}
				}
			}
			else {
				parser.groundOutVariable(var1, false);
				parser.groundOutVariable(var2, false);

				List<String> variables = new ArrayList<String>();
				variables.add(var1);
				variables.add(var2);

				for (String relname : relnames) {

					BindingSet bindingSet = parser.parameters.generateInstantiations(variables);
					if (bindingSet.isEmpty() || !bindingSet.get(0).containsKey(var1) || !bindingSet.get(0).containsKey(var2)) {
						parser.logger.finest(relname
								+ " not filled because one or more arguments do not have parameters supplied");
					}
					else {
						for (MapSet<String, Value> instantiation : bindingSet) {
							for (Value v1 : instantiation.get(var1)) {
								for (Value v2 : instantiation.get(var2)) {
									queries.add(new SimpleQuery(relname, v1.getFiller(), v2.getFiller()));
								}
							}
						}
					}
				}
			}
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(21/* test_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // test_command_prim ::= id_or_var IDENTIFIER VARIABLE
		{
			List<SimpleQuery> RESULT = null;
			int relnamesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnamesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			IDorVAR relnames = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int holderleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int holderright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String holder = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).value;
			int var2left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int var2right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String var2 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			if (relnames.getVarName() != null) {
				String var1 = relnames.getVarName();
				parser.groundOutVariable(var1, false);
				parser.groundOutVariable(var2, false);

				List<String> variables = new ArrayList<String>();
				variables.add(var1);
				variables.add(var2);

				BindingSet bindingSet = parser.parameters.generateInstantiations(variables);
				if (bindingSet.isEmpty() || !bindingSet.get(0).containsKey(var1) || !bindingSet.get(0).containsKey(var2)) {
					parser.logger
							.finest("test not carried out because one or more arguments do not have parameters supplied");
				}
				else {
					for (MapSet<String, Value> instantiation : bindingSet) {
						for (Value v1 : instantiation.get(var1)) {
							for (Value v2 : instantiation.get(var2)) {
								queries.add(new SimpleQuery(v1.getFiller(), holder, v2.getFiller()));
							}
						}
					}
				}
			}
			else {
				parser.groundOutVariable(var2, false);
				Set<Value> params = parser.parameters.getParameter(var2);
				for (String relname : relnames) {
					for (Value param : params) {
						queries.add(new SimpleQuery(relname, holder, param.getFiller()));
					}
				}
			}
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(21/* test_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // test_command_prim ::= id_or_var id_or_var STR
		{
			List<SimpleQuery> RESULT = null;
			int relnamesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnamesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			IDorVAR relnames = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int valueleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int valueright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String value = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			if (relnames.getVarName() != null && names.getVarName() != null) {
				String var1 = relnames.getVarName();
				String var2 = names.getVarName();
				parser.groundOutVariable(var1, false);
				parser.groundOutVariable(var2, false);

				List<String> variables = new ArrayList<String>();
				variables.add(var1);
				variables.add(var2);

				BindingSet bindingSet = parser.parameters.generateInstantiations(variables);
				if (bindingSet.isEmpty() || !bindingSet.get(0).containsKey(var1) || !bindingSet.get(0).containsKey(var2)) {
					parser.logger
							.finest("test not carried out because one or more arguments do not have parameters supplied");
				}
				else {
					for (MapSet<String, Value> instantiation : bindingSet) {
						for (Value v1 : instantiation.get(var1)) {
							for (Value v2 : instantiation.get(var2)) {
								queries.add(new SimpleQuery(v1.getFiller(), v2.getFiller(), value));
							}
						}
					}
				}
			}
			else {
				for (String relname : relnames) {
					for (String holder : names) {
						queries.add(new SimpleQuery(relname, holder, value));
					}
				}
			}
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(21/* test_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // test_command_prim ::= id_or_var id_or_var IDENTIFIER
		{
			List<SimpleQuery> RESULT = null;
			int relnamesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnamesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			IDorVAR relnames = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int valueleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int valueright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String value = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			if (relnames.getVarName() != null && names.getVarName() != null) {
				String var1 = relnames.getVarName();
				String var2 = names.getVarName();
				parser.groundOutVariable(var1, false);
				parser.groundOutVariable(var2, false);

				List<String> variables = new ArrayList<String>();
				variables.add(var1);
				variables.add(var2);

				BindingSet bindingSet = parser.parameters.generateInstantiations(variables);
				if (bindingSet.isEmpty() || !bindingSet.get(0).containsKey(var1) || !bindingSet.get(0).containsKey(var2)) {
					parser.logger
							.finest("test not carried out because one or more arguments do not have parameters supplied");
				}
				else {
					for (MapSet<String, Value> instantiation : bindingSet) {
						for (Value v1 : instantiation.get(var1)) {
							for (Value v2 : instantiation.get(var2)) {
								queries.add(new SimpleQuery(v1.getFiller(), v2.getFiller(), value));
							}
						}
					}
				}
			}
			else {
				for (String relname : relnames) {
					for (String holder : names) {
						queries.add(new SimpleQuery(relname, holder, value));
					}
				}
			}
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(21/* test_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // test_command_prim ::= id_or_var IDENTIFIER
		{
			List<SimpleQuery> RESULT = null;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String type = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			List<SimpleQuery> queries = new ArrayList<SimpleQuery>();
			for (String name : names) {
				queries.add(new SimpleQuery(name, type));
			}
			RESULT = queries;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(21/* test_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // test_command_list ::=
		{
			List<SimpleQuery> RESULT = null;

			RESULT = new ArrayList<SimpleQuery>();

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(20/* test_command_list */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // test_command_list ::= test_command_list OPENPAREN test_command_prim CLOSEPAREN
		{
			List<SimpleQuery> RESULT = null;
			int tclleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left;
			int tclright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).right;
			List<SimpleQuery> tcl = (List<SimpleQuery>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 3)).value;
			int testleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int testright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			List<SimpleQuery> test = (List<SimpleQuery>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;

			tcl.addAll(test);
			RESULT = tcl;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(20/* test_command_list */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // test_prim ::= TEST test_command_list SEMICOLON
		{
			Object RESULT = null;
			int tclleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int tclright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			List<SimpleQuery> tcl = (List<SimpleQuery>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;

			if (parser.isSuccessful) {
				boolean result = true;
				for (SimpleQuery s : tcl) {
					boolean currentResult = MiniOntologyQueryAPI.holds(parser.miniOntology, s);
					result = result && currentResult;
					parser.logger.finest("test: " + s + ": " + result);
					if (!currentResult) {
						parser.logger.warning("test failed on " + s);
					}
				}
				parser.isSuccessful = result;
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(7/* test_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // test_prim ::= TEST NEGATION test_command_list SEMICOLON
		{
			Object RESULT = null;
			int tclleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int tclright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			List<SimpleQuery> tcl = (List<SimpleQuery>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;

			if (parser.isSuccessful) {
				boolean result = true;
				for (SimpleQuery s : tcl) {
					boolean currentResult = MiniOntologyQueryAPI.holds(parser.miniOntology, s);
					result = result && currentResult;
					parser.logger.finest("test: !" + s + ": " + result);
					if (currentResult) {
						parser.logger.warning("test failed on " + s);
					}
				}
				parser.isSuccessful = !result;
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(7/* test_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // update_interval_prim ::= CURRENTINTERVAL id_or_var
		{
			Object RESULT = null;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode == SimulatorMode.CONTEXTMODEL_UPDATE) {
				if (names.isEmpty()) {
					parser.isSuccessful = false;
					throw new SimulatorException("trying to set an invalid interval " + names.getVarName()
							+ " as the current one in the " + parser.scriptName + " script.");
				}
				else if (names.size() == 1) {
					parser.miniOntology.setCurrentInterval(names.get(0));
				}
				else {
					parser.isSuccessful = false;
					throw new SimulatorException("trying to set multiple intervals as the current one");
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(13/* update_interval_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // rem_all_prim ::= REM IDENTIFIER id_or_var
		{
			Object RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				for (String holder : names) {
					try {
						parser.miniOntology.removeAllRelationFillers(relname, holder);
						parser.logger.finest("(REM " + relname + " " + holder + ")");
					}
					catch (NoInstanceFoundException nife) {
						parser.logger.warning("no instance found: " + nife.getMessage());
					}
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(15/* rem_all_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // rem_prim ::= REM IDENTIFIER VARIABLE VARIABLE
		{
			Object RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int var1left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int var1right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String var1 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).value;
			int var2left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int var2right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String var2 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				parser.groundOutVariable(var1, false);
				parser.groundOutVariable(var2, false);

				List<String> variables = new ArrayList<String>();
				variables.add(var1);
				variables.add(var2);

				BindingSet bindingSet = parser.parameters.generateInstantiations(variables);
				if (bindingSet.isEmpty() || !bindingSet.get(0).containsKey(var1) || !bindingSet.get(0).containsKey(var2)) {
					parser.logger.finest(relname
							+ " not filled because one or more arguments do not have parameters supplied");
				}
				else {
					for (MapSet<String, Value> instantiation : bindingSet) {
						for (Value v1 : instantiation.get(var1)) {
							for (Value v2 : instantiation.get(var2)) {
								try {
									parser.miniOntology.removeRelationFiller(relname, v1.getFiller(), v2.getFiller());
									parser.logger.finest("(REM " + relname + " " + v1.getFiller() + " " + v2.getFiller() + ")");
								}
								catch (NoInstanceFoundException nife) {
									parser.logger.warning("no instance found: " + nife.getMessage());
								}
							}
						}
					}
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(14/* rem_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // rem_prim ::= REM IDENTIFIER IDENTIFIER VARIABLE
		{
			Object RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int holderleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int holderright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String holder = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).value;
			int varleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int varright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String var = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				parser.groundOutVariable(var, false);
				Set<Value> params = parser.parameters.getParameter(var);
				if (params != null) {
					for (Value param : params) {
						try {
							parser.miniOntology.removeRelationFiller(relname, holder, param.getFiller());
							parser.logger.finest("(REM " + relname + " " + holder + " " + param.getFiller() + ")");
						}
						catch (NoInstanceFoundException nife) {
							parser.logger.warning("no instance found: " + nife.getMessage());
						}
					}
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(14/* rem_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // rem_prim ::= REM IDENTIFIER id_or_var STR
		{
			Object RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int valueleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int valueright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String value = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				for (String holder : names) {
					try {
						parser.miniOntology.removeRelationFiller(relname, holder, value);
						parser.logger.finest("(REM " + relname + " " + holder + " " + value + ")");
					}
					catch (NoInstanceFoundException nife) {
						parser.logger.warning("no instance found: " + nife.getMessage());
					}
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(14/* rem_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // rem_prim ::= REM IDENTIFIER id_or_var IDENTIFIER
		{
			Object RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int valueleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int valueright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String value = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				for (String holder : names) {
					try {
						parser.miniOntology.removeRelationFiller(relname, holder, value);
						parser.logger.finest("(REM " + relname + " " + holder + " " + value + ")");
					}
					catch (NoInstanceFoundException nife) {
						parser.logger.warning("no instance found: " + nife.getMessage());
					}
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(14/* rem_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // inst_name ::= STR
		{
			List<String> RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			List<String> names = new ArrayList<String>();
			names.add(s);
			RESULT = names;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(18/* inst_name */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // inst_name ::= OPENPAREN inst_prim CLOSEPAREN
		{
			List<String> RESULT = null;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			List<String> names = (List<String>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;

			RESULT = names;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(18/* inst_name */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // inst_name ::= IDENTIFIER
		{
			List<String> RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String i = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			List<String> names = new ArrayList<String>();
			names.add(i);
			RESULT = names;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(18/* inst_name */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // fil_pair_list ::=
		{
			List<String> RESULT = null;

			if (parser.isSuccessful) {
				RESULT = new ArrayList<String>();
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(17/* fil_pair_list */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // fil_pair_list ::= fil_pair_list OPENPAREN IDENTIFIER VARIABLE CLOSEPAREN
		{
			List<String> RESULT = null;
			int rplleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 4)).left;
			int rplright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 4)).right;
			List<String> rpl = (List<String>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 4)).value;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int varleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int varright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String var = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).value;

			if (parser.isSuccessful) {
				rpl.add(relname + ":" + var + ":true");
				RESULT = rpl;
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(17/* fil_pair_list */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // fil_pair_list ::= fil_pair_list OPENPAREN IDENTIFIER inst_name CLOSEPAREN
		{
			List<String> RESULT = null;
			int rplleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 4)).left;
			int rplright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 4)).right;
			List<String> rpl = (List<String>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 4)).value;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int instnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int instnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			List<String> instname = (List<String>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;

			if (parser.isSuccessful) {
				for (String name : instname) {
					rpl.add(relname + ":" + name + ":false");
				}
				RESULT = rpl;
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(17/* fil_pair_list */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // opt_fil_list ::=
		{
			List<String> RESULT = null;

			RESULT = new ArrayList<String>();

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(16/* opt_fil_list */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // opt_fil_list ::= FIL fil_pair_list
		{
			List<String> RESULT = null;
			int rplleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int rplright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			List<String> rpl = (List<String>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			RESULT = rpl;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(16/* opt_fil_list */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // inst_prim ::= INST IDENTIFIER opt_fil_list
		{
			List<String> RESULT = null;
			int typeleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String type = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).value;
			int oflleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int oflright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			List<String> ofl = (List<String>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				RESULT = parser.addNewIndividuals(null, type, ofl);
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(19/* inst_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // inst_prim ::= INST id_or_var IDENTIFIER opt_fil_list
		{
			List<String> RESULT = null;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String type = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).value;
			int oflleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int oflright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			List<String> ofl = (List<String>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				if (names.isEmpty()) {
					List<String> ids = parser.addNewIndividuals(null, type, ofl);
					for (String id : ids) {
						parser.parameters.addParameter(names.getVarName(), new Value(id, false));
					}
					RESULT = ids;
				}
				else if (names.size() == 1) {
					RESULT = parser.addNewIndividuals(names.get(0), type, ofl);
				}
				else {
					// would not know how to match up the multiple names with the different sets of parameters
					parser.isSuccessful = false;
					throw new SimulatorException("more than one instance name supplied for a new instance");
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(19/* inst_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // inst_prim ::= INST id_or_var IDENTIFIER id_or_var id_or_var opt_fil_list
		{
			List<String> RESULT = null;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 4)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 4)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 4)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).right;
			String type = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).value;
			int parentleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int parentright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			IDorVAR parent = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int precedingleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int precedingright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			IDorVAR preceding = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int oflleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int oflright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			List<String> ofl = (List<String>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				if (parent.size() > 1 || preceding.size() > 1) {
					throw new SimulatorException("multiple parent and/or preceding intervals supplied for a new interval");
				}
				if (names.isEmpty()) {
					List<String> ids = parser.addNewIntervals(null, type, parent.get(0), preceding.get(0), ofl);
					for (String id : ids) {
						parser.parameters.addParameter(names.getVarName(), new Value(id, false));
					}
					RESULT = ids;
				}
				else if (names.size() == 1) {
					RESULT = parser.addNewIntervals(names.get(0), type, parent.get(0), preceding.get(0), ofl);
				}
				else {
					// would not know how to match up the multiple names with the different sets of parameters
					parser.isSuccessful = false;
					throw new SimulatorException("more than one instance name supplied for a new interval");
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(19/* inst_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // fil_prim ::= FIL VARIABLE VARIABLE VARIABLE
		{
			Object RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int var1left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int var1right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String var1 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).value;
			int var2left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int var2right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String var2 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				parser.groundOutVariable(relname, false);
				parser.groundOutVariable(var1, false);
				parser.groundOutVariable(var2, true);

				List<String> variables = new ArrayList<String>();
				variables.add(relname);
				variables.add(var1);
				variables.add(var2);

				BindingSet bindingSet = parser.parameters.generateInstantiations(variables);
				if (bindingSet.isEmpty() || !bindingSet.get(0).containsKey(var1) || !bindingSet.get(0).containsKey(var2)) {
					parser.logger.finest(relname
							+ " not filled because one or more arguments do not have parameters supplied");
				}
				else {
					for (MapSet<String, Value> instantiation : bindingSet) {
						for (Value vRel : instantiation.get(relname)) {
							for (Value v1 : instantiation.get(var1)) {
								for (Value v2 : instantiation.get(var2)) {
									parser.miniOntology.addRelationFiller(vRel.getFiller(), v1.getFiller(), v2.getFiller());
									parser.logger.finest("(FIL " + vRel.getFiller() + " " + v1.getFiller() + " "
											+ v2.getFiller() + ")");
								}
							}
						}
					}
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(12/* fil_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // fil_prim ::= FIL IDENTIFIER VARIABLE VARIABLE
		{
			Object RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int var1left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int var1right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String var1 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).value;
			int var2left = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int var2right = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String var2 = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				parser.groundOutVariable(var1, false);
				parser.groundOutVariable(var2, true);

				List<String> variables = new ArrayList<String>();
				variables.add(var1);
				variables.add(var2);

				BindingSet bindingSet = parser.parameters.generateInstantiations(variables);
				if (bindingSet.isEmpty() || !bindingSet.get(0).containsKey(var1) || !bindingSet.get(0).containsKey(var2)) {
					parser.logger.finest(relname
							+ " not filled because one or more arguments do not have parameters supplied");
				}
				else {
					for (MapSet<String, Value> instantiation : bindingSet) {
						for (Value v1 : instantiation.get(var1)) {
							for (Value v2 : instantiation.get(var2)) {
								parser.miniOntology.addRelationFiller(relname, v1.getFiller(), v2.getFiller());
								parser.logger.finest("(FIL " + relname + " " + v1.getFiller() + " " + v2.getFiller() + ")");
							}
						}
					}
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(12/* fil_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // fil_prim ::= FIL IDENTIFIER IDENTIFIER VARIABLE
		{
			Object RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int holderleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int holderright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			String holder = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).value;
			int varleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int varright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String var = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				parser.groundOutVariable(var, true);
				Set<Value> params = parser.parameters.getParameter(var);
				for (Value param : params) {
					parser.miniOntology.addRelationFiller(relname, holder, param.getFiller());
					parser.logger.finest("(FIL " + relname + " " + holder + " " + param.getFiller() + ")");
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(12/* fil_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // fil_prim ::= FIL IDENTIFIER id_or_var inst_name
		{
			Object RESULT = null;
			int relnameleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left;
			int relnameright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).right;
			String relname = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 2)).value;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int valuesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int valuesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			List<String> values = (List<String>) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				for (String holder : names) {
					for (String value : values) {
						parser.miniOntology.addRelationFiller(relname, holder, value);
						parser.logger.finest("(FIL " + relname + " " + holder + " " + value + ")");
					}
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(12/* fil_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // ind_prim ::= IND id_or_var IDENTIFIER
		{
			Object RESULT = null;
			int namesleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int namesright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			IDorVAR names = (IDorVAR) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String type = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			if (parser.isSuccessful && parser.mode != SimulatorMode.TEST_PRECONDITION) {
				if (names.isEmpty()) {
					String name = type.substring(0, 1).toLowerCase() + type.substring(1) + String.valueOf(parser.counter);
					names.add(name);
					parser.parameters.addParameter(names.getVarName(), new Value(name, false));
				}
				for (String name : names) {
					parser.miniOntology.addIndividual(name, type);
					parser.logger.finest("(IND " + name + " " + type + ")");
				}
			}

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(11/* ind_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // id_or_var ::= VARIABLE
		{
			IDorVAR RESULT = null;
			int varleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int varright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String var = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			List<String> names = new ArrayList<String>();
			parser.groundOutVariable(var, false); // should new instances be allowed?
			Set<Value> params = parser.parameters.getParameter(var);
			if (params != null) {
				for (Value param : params) {
					names.add(param.getFiller());
				}
			}
			RESULT = new IDorVAR(names, var);

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(1/* id_or_var */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // id_or_var ::= IDENTIFIER
		{
			IDorVAR RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).value;

			RESULT = new IDorVAR(id, null);

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(1/* id_or_var */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // exec_command_prim ::= update_interval_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(6/* exec_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // exec_command_prim ::= rem_all_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(6/* exec_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // exec_command_prim ::= rem_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(6/* exec_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // exec_command_prim ::= inst_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(6/* exec_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // exec_command_prim ::= fil_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(6/* exec_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // exec_command_prim ::= ind_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(6/* exec_command_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // exec_prim ::= EXEC OPENPAREN exec_command_prim CLOSEPAREN SEMICOLON
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(5/* exec_prim */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // command ::= run_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(4/* command */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // command ::= default_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(4/* command */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // command ::= query_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(4/* command */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // command ::= testexist_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(4/* command */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // command ::= test_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(4/* command */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // command ::= exec_prim
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(4/* command */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // command_list ::= command
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(3/* command_list */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // command_list ::= command_list command
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(3/* command_list */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= script EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).right;
			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$ScriptReader$stack
					.elementAt(CUP$ScriptReader$top - 1)).value;
			RESULT = start_val;
			CUP$ScriptReader$result = new java_cup.runtime.Symbol(0/* $START */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			/* ACCEPT */
			CUP$ScriptReader$parser.done_parsing();
			return CUP$ScriptReader$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // script ::= OPENBRACKET command_list CLOSEBRACKET
		{
			Object RESULT = null;

			CUP$ScriptReader$result = new java_cup.runtime.Symbol(2/* script */,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$ScriptReader$stack.elementAt(CUP$ScriptReader$top - 0)).right, RESULT);
		}
			return CUP$ScriptReader$result;

			/* . . . . . . */
		default:
			throw new Exception("Invalid action number found in internal parse table");

		}
	}
}
