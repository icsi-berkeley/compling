package starter
//
// sentence.grm
//
// The general cxn S is the root of most (all?) speech acts /

general construction S
    subcase of RootType 
    meaning: EventDescriptor


// This general cxn does the agreement between subj and verb
general construction S-With-Subj  
    subcase of S
    constructional
        constituents
            subj: NP
            fin: HasVerbFeatures  // for modals, not VP
        constraints
        	fin.verbform <-- Finite	//features.
        	subj.features.person <--> fin.features.person
        	subj.features.number <--> fin.features.number
            subj.features.case <-- "nom"
    meaning
        constraints
	       subj.m <--> self.m.profiledParticipant
 	
construction Declarative
    subcase of S-With-Subj
    constructional
        constituents
	       fin: VP
    form
        constraints
	       subj.f before fin.f
    meaning
        constraints
           self.m <--> fin.ed
		   fin.ed.profiledParticipant.ontological-category <--> subj.m.ontological-category  
		   
// Some Question types

general construction Question  // both Aux and Finite inversions
	subcase of S  

general construction YN-Question  
	subcase of  Question

general construction S-With-Finite-Inversion  
	subcase of S-With-Subj, YN-Question
  		   
construction  S-With-Copula-Inversion-PP //special case
    subcase of S-With-Finite-Inversion
    constructional
        constituents
    	   fin: BeCopula
    	   pp: Loc-PP 
        constraints
            
    form
        constraints
            fin.f meets subj.f 
            subj.f before pp.f
    meaning
        constraints
        	subj.m <--> self.m.profiledParticipant  // from S-With-Subj
            fin.m.protagonist <--> subj.m
            pp.m.trajector <--> subj.m
            self.m.eventProcess <--> fin.m
            self.fin.m.state <--> adj.m
            
construction S-With-Copula-Inversion-Adj // tested 10/29/12
    subcase of S-With-Finite-Inversion
    constructional
        constituents
    	   fin: BeCopula
    	   adj: Adjective 
    	   //optional end: QMark  // punctuation   ?
        constraints
            //fin.features.expectedVerbForm <--> vp.features.verbform 
    form
        constraints
            fin.f meets subj.f 
            subj.f before adj.f
    meaning
        constraints
    		self.fin.m.actionary <-- @be2
        	self.fin.m.protagonist <--> self.m.profiledParticipant
        	self.adj.m.modifiedThing <--> self.m.profiledParticipant
        	self.adj.m.domain <--> self.m.profiledParticipant.ontological-category
			self.fin.m.state <--> adj.m
			self.m.eventProcess <--> fin.m
	
	
// Simple imperative, testing
general construction Imperative
  subcase of S

construction SimpleImperative
  subcase of Imperative
  constructional
    constituents
      vp: VP
    constraints
      vp.verbform <-- Base
  meaning
    constraints
      self.m <--> vp.ed  

			
//  Utterance, Discourse Element -- Questions
// Uncomment all this below to fully analyze "was the block red ? "


general construction Utterance
    subcase of RootType 
    constructional 
        constituents
            core: S
            optional end: EMark  // punctuation like . ! ?
    form 
        constraints  
            core.f meets end.f
    meaning: DiscourseElement
        constraints
          self.m.content <--> core.m
construction YNQuesUtterance  
    subcase of Utterance
    constructional 
        constituents
            core: YN-Question
            end: QMark    
    form
        constraints
            core.f meets end.f 
    meaning 
        constraints
            self.m.mood <-- "YN-Question" // this is where we want mood	
            self.m.content <--> core.m
            
general construction EMark  
    subcase of Word

construction IMark
   subcase of EMark
   form
      constraints
         self.f.orth <-- "!"
         
construction PMark
	subcase of EMark
	form
	  constraints
	    self.f.orth <-- "."         

construction Comma
	subcase of Word
	form
	   constraints
	      self.f.orth <-- ","

construction QMark
    subcase of EMark 
    form 
        constraints
            self.f.orth <-- "?" 

schema DiscourseElement //meaning of Utterance
    roles
        speaker: RD 	
        addressee: RD 	
        attentional_focus  
        content: EventDescriptor
        mood: @mood			// one of declarative, imperative, ...
    constraints
		speaker.ontological-category <-- @sentient
		addressee.ontological-category <-- @sentient


